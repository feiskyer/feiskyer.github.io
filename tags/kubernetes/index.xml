<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on Feisky</title><link>https://feisky.xyz/tags/kubernetes/</link><description>Recent content in Kubernetes on Feisky</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 02 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://feisky.xyz/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 1.22 新特性预览</title><link>https://feisky.xyz/posts/2021-08-02-kubernetes-122/</link><pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-08-02-kubernetes-122/</guid><description>&lt;p>Kubernetes 1.22 &lt;a href="https://github.com/kubernetes/sig-release/tree/master/releases/release-1.22">将于 8 月 4 日发布&lt;/a>，本文带你一起来看看这个版本带来的新特性，以便你为新版本的测试升级做好准备。&lt;/p>
&lt;h2 id="删除一系列已弃用-api">删除一系列已弃用 API&lt;/h2>
&lt;p>Kubernetes 1.22 最大的变化之一是删除了一系列已废弃的 API，包括：&lt;/p></description></item><item><title>基于Kubernetes的多集群实践</title><link>https://feisky.xyz/posts/2021-03-20-multi-cluster/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-20-multi-cluster/</guid><description>&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/uM4d3_fwLIdQ95fBWcmRjw">基于Kubernetes的多云和混合云&lt;/a> 文章中，我介绍了多云和混合云的由来以及常用方案。多云和混合云的目的主要有以下几个：&lt;/p>
&lt;ul>
&lt;li>解除云服务商锁定，避免服务单纯依赖于某一家云服务商。&lt;/li>
&lt;li>提高服务可用性，不仅可以跨地区和跨地域，更可以在某个云服务商故障时继续在其他正常的云服务商中运行。&lt;/li>
&lt;li>优化基础设施成本，根据云服务商的价格选择成本较低的方案。&lt;/li>
&lt;li>保障业务突发的弹性扩展，在某个云服务商容量不足时扩展到其他云服务商中。&lt;/li>
&lt;/ul>
&lt;p>有了这么多好处，多云和混合云的缺点也很多，特别是提高了基础架构的复杂度。而 Kubernetes 的诞生则是解决了云平台异构的问题：无论是在哪家云服务上中运行 Kubernetes，其底层的云平台异构问题都被封装为相同的 Kubernetes API。这样，对用户来说，只需要在部署 Kubernetes 集群本身的时候考虑每家云平台的不同，而其上的管理平台和业务应用都可以用相同的 Kubernetes API 进行操作。本文就给大家介绍一下多 Kubernetes 集群的常用实践。&lt;/p></description></item><item><title>Kubernetes Ingress 可视化编辑器</title><link>https://feisky.xyz/posts/2021-03-19-ingress-viz/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-19-ingress-viz/</guid><description>&lt;p>&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/ingress/">Ingress&lt;/a> 是 Kubernetes 集群中用于管理服务外部访问的 API 对象，典型的访问方式是 HTTP 和 HTTPS。Ingress 可以提供七层负载均衡、SSL 终结、基于名称的虚拟主机等。&lt;/p></description></item><item><title>如何无宕机扩容 Kubernetes 存储</title><link>https://feisky.xyz/posts/2021-03-17-storage-expansion/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-17-storage-expansion/</guid><description>&lt;p>Kubernetes 从 1.11 开始支持 Persistent Volumes Claim（PVC）的动态扩容，诸如 AWS EBS、GlusterFS、rbd 等都可以修改 PVC 增大持久化存储的大小。但是，具体扩容时是否对应用有影响还要看具体的存储插件实现，有些存储插件的实现无需重启 Pod，而有些存储插件则需要把 PV 从 Node 上卸载之后才支持扩容。今天，我们就来看看各种不同的存储插件如何实现无宕机扩容。&lt;/p></description></item><item><title>如何快速掌握 Kubernetes 网络</title><link>https://feisky.xyz/posts/2021-03-12-k8s-network-learn/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-12-k8s-network-learn/</guid><description>&lt;p>经常听到周边的人谈到 Kubernetes 网络很难掌握，今天来谈谈如何快速学习和掌握 Kubernetes 网络。&lt;/p>
&lt;h2 id="kubernetes-网络模型">Kubernetes 网络模型&lt;/h2>
&lt;p>要掌握 Kubernetes 网络，最首要的就是要熟悉其基本网络模型。实际上，Kubernetes 网络模型非常简单，只要掌握以下三点即可：&lt;/p></description></item><item><title>云原生时代的 YAML 教程</title><link>https://feisky.xyz/posts/2021-03-03-yaml/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-03-yaml/</guid><description>&lt;p>YAML 是 &amp;ldquo;YAML Ain&amp;rsquo;t a Markup Language&amp;rdquo; 的缩写，是一种可读性高的数据序列化语言，常用于配置管理中。在云原生时代，很多流行的开源项目、云平台等都是 YAML 格式表达的，比如 Kubernetes 中的资源对象、Ansible/Terraform 的配置文件以及流行 CI/CD 平台的配置文件等等。&lt;/p></description></item><item><title>聊一聊 GKE Autopilot</title><link>https://feisky.xyz/posts/2021-03-01-gke-autopilot/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-01-gke-autopilot/</guid><description>&lt;p>Google Cloud 前两天推出了 GKE Autopilot，其官方博客 &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/introducing-gke-autopilot">Introducing GKE Autopilot: a revolution in managed Kubernetes&lt;/a> 称之为革命性的托管 Kubernetes 服务。但其“革命性”的亮点都有哪些呢？&lt;/p>
&lt;h2 id="gke-autopilot-亮点">GKE Autopilot 亮点&lt;/h2>
&lt;p>推出 Autopilot 之后，GKE 支持两种操作模式，包括标准模式和 Autopilot 模式。这两者的主要区别在于 Autopilot 自动管理节点，而标准模式还需要用户去管理节点。&lt;/p></description></item><item><title>Kubernetes网络策略可视化编辑器</title><link>https://feisky.xyz/posts/2021-03-08-network-policy/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-03-08-network-policy/</guid><description>&lt;p>Kubernetes网络策略通常需要通过 YAML 来定义，在编写复杂网络策略时一点也不直观，很容易出错。虽然 Kubernetes 的官方文档已经详细介绍了网络策略的编写方法，但实际掌握起来也不太容易。今天，我就给大家介绍一个网络策略的可视化编辑器，方便你通过可视化界面编写网络策略。&lt;/p></description></item><item><title>三大公有云托管 Kubernetes 服务 (EKS、GKE、AKS) 评估</title><link>https://feisky.xyz/posts/2021-01-20-eks-gke-aks/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-20-eks-gke-aks/</guid><description>&lt;p>作为发展最快的开源项目，Kubernetes 已经在越来越多的企业落地。而作为全球三大公有云提供商，AWS、Azure 和 GCP 都提供了托管 Kubernetes 集群服务，即 Elastic Kubernetes Service (EKS)、Azure Kubernetes Service (AKS) 和 Google Kubernetes Engine (GKE)。&lt;/p></description></item><item><title>为什么已经用了滚动更新服务还会中断</title><link>https://feisky.xyz/posts/2021-01-18-rolling-update/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-18-rolling-update/</guid><description>&lt;p>滚动更新作为一个最佳实践，是每个服务在变更时都会采纳的方案。但在 Kubernetes 实践中，即便使用了滚动更新，也并不一定能够保证服务在更新和维护时总是可用的。&lt;/p></description></item><item><title>Kubernetes 配置更新的那些事</title><link>https://feisky.xyz/posts/2021-01-13-config-manage/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2021-01-13-config-manage/</guid><description>&lt;p>任何应用都需要一些特定的配置项，用来自定义应用的特性。这些配置通常可以分为两类：一类是诸如运行环境和外部依赖等非敏感配置，另一类是诸如密钥和 SSH 证书等敏感配置。&lt;/p></description></item><item><title>镜像构建的正确姿势</title><link>https://feisky.xyz/posts/2020-06-01-container-image/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-06-01-container-image/</guid><description>&lt;h2 id="dockerfile">Dockerfile&lt;/h2>
&lt;p>什么是 Dockerfile ？Dockerfile 是一个用来描述镜像构建指令的文本文件。构建系统可以按照这些指令一步步地执行构建出容器镜像。&lt;/p>
&lt;p>比如，下面是一个最简单的 Dockerfile：&lt;/p></description></item><item><title>Kubernetes中的CI/CD</title><link>https://feisky.xyz/posts/2020-04-19-ci-cd/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-19-ci-cd/</guid><description>&lt;h2 id="cicd-概念">CI/CD 概念&lt;/h2>
&lt;p>CI/CD 其实早在很多年前就已经诞生了，主要是为了将频繁的变更测试、构建、交付和部署等进行自动化，减少手工操作。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>CI 持续集成主要是在代码更改时自动分支合并、构建并执行一系列的测试（包括单元测试、集成测试、端到端测试等），确保这些变更不会破坏原来的应用。&lt;/p></description></item><item><title>如何解决 Kubernetes 的 DNS 延迟问题</title><link>https://feisky.xyz/posts/2020-04-09-dns-latency/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2020-04-09-dns-latency/</guid><description>&lt;p>由于 Linux 内核中的缺陷，在 Kubernetes 集群中你很可能会碰到恼人的 DNS 间歇性 5 秒延迟问题（社区 issue 为 &lt;strong>#56903&lt;/strong>[1]）。虽然 issue 已经关闭了，但并不是说这个问题已经完全解决了，所以在管理和维护 Kubernetes 集群时，我们需要注意绕开这个缺陷。&lt;/p></description></item><item><title>Azure Container Instance (ACI)</title><link>https://feisky.xyz/posts/2017-11-27-aci/</link><pubDate>Mon, 27 Nov 2017 21:30:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-11-27-aci/</guid><description>&lt;p>Azure 容器实例（ACI）提供了在 Azure 中运行容器的最简捷方式，它不需要用户配置任何虚拟机或其它高级服务。ACI 适用于快速突发式增长和资源调整的业务，但功能相对比较简单。对于需要完整容器集群编排功能的场景建议使用 ACS 或 AKS。&lt;/p></description></item><item><title>Azure Container Service（ACS）简介</title><link>https://feisky.xyz/posts/2017-11-23-acs-introduction/</link><pubDate>Mon, 20 Nov 2017 21:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-11-23-acs-introduction/</guid><description>&lt;p>Azure Container Service（ACS）是 Microsoft Azure 在2015年推出的容器服务，支持 Kubernetes、DCOS 以及 Dockers Swarm 等多种容器编排工具。并且 ACS 的核心功能是开源的，用户可以通过&lt;a href="https://github.com/Azure/acs-engine">https://github.com/Azure/acs-engine&lt;/a>来查看和下载使用。&lt;/p></description></item><item><title>Azure Managed Kubernetes (AKS) 简介</title><link>https://feisky.xyz/posts/2017-11-17-aks/</link><pubDate>Fri, 17 Nov 2017 08:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2017-11-17-aks/</guid><description>&lt;p>Azure 容器服务 (AKS) 是 Microsoft Azure 最近&lt;a href="https://azure.microsoft.com/en-us/blog/introducing-azure-container-service-aks-managed-kubernetes-and-azure-container-registry-geo-replication/">发布&lt;/a>的一个托管的 Kubernetes 服务（预览版），它独立于现有的 Azure Container Service （ACS）。借助 AKS 用户无需具备容器业务流程的专业知识就可以快速、轻松的部署和管理容器化的应用程序。AKS 支持自动升级和自动故障修复，按需自动扩展或缩放资源池，消除了用户管理和维护 Kubernetes 集群的负担。并且集群管理本身是免费的，Azure 只收取容器底层的虚拟机的费用。&lt;/p></description></item><item><title>开始一本开源电子书《Kubernetes指南》</title><link>https://feisky.xyz/posts/2017-05-21-start-kubernetes-handbook/</link><pubDate>Sun, 21 May 2017 17:42:34 +0000</pubDate><guid>https://feisky.xyz/posts/2017-05-21-start-kubernetes-handbook/</guid><description>&lt;p>Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，也是CNCF最重要的组件之一，主要功能包括：&lt;/p></description></item><item><title>Kubernetes v1.5.0 release</title><link>https://feisky.xyz/posts/2016-12-13-kubernetes-v1-5-0-release/</link><pubDate>Tue, 13 Dec 2016 11:51:29 +0000</pubDate><guid>https://feisky.xyz/posts/2016-12-13-kubernetes-v1-5-0-release/</guid><description>&lt;p>&lt;strong>Update on 2016.12.14:&lt;/strong>&lt;/p>
&lt;p>Due to a serious security problem, kubernetes v1.5.0 is not recommanded. Kubernetes v1.5.1 has just released, so we should upgrade to v1.5.1 directly.&lt;/p>
&lt;blockquote>
&lt;p>The &lt;code>--anonymous-auth=&lt;/code> flag in v1.5.0 is true by default (which may result in any users being able to access kubernetes API), but v1.5.1 turns it to false.&lt;/p>
&lt;/blockquote>
&lt;h2 id="kubernetes-v150">Kubernetes v1.5.0&lt;/h2>
&lt;ul>
&lt;li>StatefulSets (ex-PetSets)
&lt;ul>
&lt;li>StatefulSets are beta now (fixes and stabilization)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Improved Federation Support
&lt;ul>
&lt;li>New command: &lt;code>kubefed&lt;/code>&lt;/li>
&lt;li>DaemonSets&lt;/li>
&lt;li>Deployments&lt;/li>
&lt;li>ConfigMaps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Simplified Cluster Deployment
&lt;ul>
&lt;li>Improvements to &lt;code>kubeadm&lt;/code>&lt;/li>
&lt;li>HA Setup for Master&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Node Robustness and Extensibility
&lt;ul>
&lt;li>Windows Server Container support&lt;/li>
&lt;li>CRI for pluggable container runtimes&lt;/li>
&lt;li>&lt;code>kubelet&lt;/code> API supports authentication and authorization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="features">Features&lt;/h2>
&lt;p>Features for this release were tracked via the use of the &lt;a href="https://github.com/kubernetes/features">kubernetes/features&lt;/a> issues repo. Each Feature issue is owned by a Special Interest Group from &lt;a href="https://github.com/kubernetes/community">kubernetes/community&lt;/a>&lt;/p></description></item><item><title>KubeCon/CloudNativeCon 2016见闻</title><link>https://feisky.xyz/posts/2016-11-14-kubecon-2016%E8%A7%81%E9%97%BB/</link><pubDate>Mon, 14 Nov 2016 09:49:52 +0000</pubDate><guid>https://feisky.xyz/posts/2016-11-14-kubecon-2016%E8%A7%81%E9%97%BB/</guid><description>&lt;p>题记：上周去西雅图参加了&lt;a href="http://events.linuxfoundation.org/events/kubecon">KubeCon&amp;amp;CloudNativeCon 2016&lt;/a>，不仅见到Dawn、Brendan、Tim以及Sig Node的各路大神，还参加了不少有趣的session。&lt;/p>
&lt;h2 id="compiling-to-containershttpscnkc16schedorgevent8k8ycompiling-to-containers-brendan-burns-microsoftiframenow100sidebaryesbgno---brendan-burns-microsoft">&lt;a href="https://cnkc16.sched.org/event/8K8y/compiling-to-containers-brendan-burns-microsoft?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no">Compiling to Containers&lt;/a> - Brendan Burns, Microsoft&lt;/h2>
&lt;p>Containers可以看作是现代分布式系统的“汇编语言”，这样分布式系统的管理实际上就成了开发“Container汇编语言”。Brendan还以JavaScript为例，演示了如何基于&lt;a href="https://github.com/brendandburns/metaparticle">Metaparticle&lt;/a>来支持不同的service pattern:&lt;/p></description></item><item><title>Kubernetes container runtime interface</title><link>https://feisky.xyz/posts/2016-09-25-kubernetes-container-runtime-interface/</link><pubDate>Sun, 25 Sep 2016 06:59:31 +0000</pubDate><guid>https://feisky.xyz/posts/2016-09-25-kubernetes-container-runtime-interface/</guid><description>&lt;p>题记：最近一段时间在做Kubernetes容器引擎接口（Container Runtime Interface， CRI）的重构，并支持以插件的方式引入外部容器引擎。CRI还在紧张有序的开发中，预计在v1.5发布第一个alpha版。&lt;/p></description></item><item><title>Kubernetes中的服务发现与负载均衡</title><link>https://feisky.xyz/posts/2016-09-11-kubernetes%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Sun, 11 Sep 2016 09:48:09 +0000</pubDate><guid>https://feisky.xyz/posts/2016-09-11-kubernetes%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>&lt;p>Kubernetes在设计之初就充分考虑了针对容器的服务发现与负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。随着kubernetes用户的激增，用户场景的不断丰富，又产生了一些新的负载均衡机制。目前，kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：&lt;/p></description></item><item><title>如何快速启动一个Kubernetes集群</title><link>https://feisky.xyz/posts/2016-08-24-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAkubernetes%E9%9B%86%E7%BE%A4/</link><pubDate>Wed, 24 Aug 2016 14:48:44 +0000</pubDate><guid>https://feisky.xyz/posts/2016-08-24-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAkubernetes%E9%9B%86%E7%BE%A4/</guid><description>&lt;p>相比Docker一个二进制文件解决所有问题，Kubernetes则为不同的服务提供了不同的二进制文件，并将一些服务放到了addons中。故而，Kubernetes的部署相对要麻烦的多。借助&lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a>项目，现在可以很方便的在本机快速启动一个单节点的Kubernetes集群。&lt;/p></description></item><item><title>Kubernetes-mesos architecture</title><link>https://feisky.xyz/posts/2016-06-07-kubernetes-mesos-architecture/</link><pubDate>Tue, 07 Jun 2016 13:21:07 +0000</pubDate><guid>https://feisky.xyz/posts/2016-06-07-kubernetes-mesos-architecture/</guid><description>&lt;p>&lt;img src="https://feisky.xyz/images/kubernetes_mesos_architecture.png" alt="">&lt;/p>
&lt;p>From &lt;a href="http://cdn.yongbok.net/ruo91/architecture/k8s/kubernetes_mesos_architecture_v1.x.png">http://cdn.yongbok.net/ruo91/architecture/k8s/kubernetes_mesos_architecture_v1.x.png&lt;/a>&lt;/p></description></item><item><title>Hypernetes: Bringing Security and Multi-tenancy to Kubernetes</title><link>https://feisky.xyz/posts/2016-06-06-hypernetes-bringing-security-and-multi-tenancy-to-kubernetes/</link><pubDate>Mon, 06 Jun 2016 16:10:25 +0000</pubDate><guid>https://feisky.xyz/posts/2016-06-06-hypernetes-bringing-security-and-multi-tenancy-to-kubernetes/</guid><description>&lt;blockquote>
&lt;p>Notes: this post is copied from &lt;a href="http://blog.kubernetes.io/2016/05/hypernetes-security-and-multi-tenancy-in-kubernetes.html">http://blog.kubernetes.io/2016/05/hypernetes-security-and-multi-tenancy-in-kubernetes.html&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>Today’s guest post is written by Harry Zhang and Pengfei Ni, engineers at HyperHQ, describing a new hypervisor based container called HyperContainer&lt;/em>&lt;/p>
&lt;p>While many developers and security professionals are comfortable with Linux containers as an effective boundary, many users need a stronger degree of isolation, particularly for those running in a multi-tenant environment. Sadly, today, those users are forced to run their containers inside virtual machines, even one VM per container.&lt;/p></description></item><item><title>Borg, Omega, and Kubernetes (ACM Queue)</title><link>https://feisky.xyz/posts/2016-03-04-borg-omega-and-kubernetes-acm-queue/</link><pubDate>Fri, 04 Mar 2016 15:46:28 +0000</pubDate><guid>https://feisky.xyz/posts/2016-03-04-borg-omega-and-kubernetes-acm-queue/</guid><description>&lt;p>Brendan Burns, Brian Grant等在&lt;a href="http://queue.acm.org/detail.cfm?id=2898444">Borg, Omega, and Kubernetes - Lessons learned from three container-management systems over a decade&lt;/a>分享了Google在容器管理的经验教训。&lt;/p>
&lt;p>在谷歌的历史上，开发了三种容器管理调度系统：&lt;/p></description></item><item><title>Kubernetes sig-node (Asia) meeting notes</title><link>https://feisky.xyz/posts/2016-03-02-kubernetes-sig-node-asia-meeting-nodes/</link><pubDate>Wed, 02 Mar 2016 17:07:00 +0000</pubDate><guid>https://feisky.xyz/posts/2016-03-02-kubernetes-sig-node-asia-meeting-nodes/</guid><description>&lt;h2 id="kubernetes-12-status-update-dchen">Kubernetes 1.2 Status Update (@dchen)&lt;/h2>
&lt;ul>
&lt;li>Deployment object and HPA scale还有一些P0和P1的问题待解决&lt;/li>
&lt;li>aws还有挺多的问题（应该要超过20个）&lt;/li>
&lt;li>整个v1.2还有超过100个issue，但大部分都不是block issue&lt;/li>
&lt;li>v1.2推荐使用Docker v1.9.1，Docker v1.10 validation &lt;a href="https://github.com/kubernetes/kubernetes/issues/19720">https://github.com/kubernetes/kubernetes/issues/19720&lt;/a>&lt;/li>
&lt;li>Docker v1.10最大的问题是镜像格式变化，需要某种转换镜像的管理机制&lt;/li>
&lt;/ul>
&lt;h2 id="huawei-conformance-test-liangchenye">Huawei Conformance Test (@liangchenye)&lt;/h2>
&lt;p>关于Pod运行和删除的PR已经merge，但是image的test还在开发中。主要的问题是没有文档指导rkt环境的搭建。&lt;/p></description></item><item><title>Hypernetes The multi tenant Kubernetes distribution</title><link>https://feisky.xyz/posts/2015-11-04-hypernetes---the-multi-tenant-kubernetes-distribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-11-04-hypernetes---the-multi-tenant-kubernetes-distribution/</guid><description>&lt;p>&amp;ldquo;&lt;a href="https://hyper.sh/blog/post/2015/07/06/the-caas-revolution.html">The Caas Revolution&lt;/a>&amp;rdquo;. This is what we believe is happening today in the Cloud ecosystem. This revolution has been started by the now famous project (and company) &lt;a href="http://www.docker.com/">Docker&lt;/a>, and embraced by Cloud providers like &lt;a href="https://cloud.google.com/container-engine/">Google&lt;/a> and &lt;a href="https://aws.amazon.com/ecs/">AWS&lt;/a>.&lt;/p>
&lt;p>However, most multi-tenant CaaS solutions today run on a public IaaS, and use fully isolated virtual machine clusters to schedule containers. This is in contrast to the solely container-based implementation provided in private CaaS deployments. The public “hybrid” VM/container isolation approach is a direct result from the shared kernel architecture in container technology.&lt;/p></description></item><item><title>Something about kubernetes authentication</title><link>https://feisky.xyz/posts/2015-09-23-something-about-kubernetes-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-09-23-something-about-kubernetes-authentication/</guid><description>&lt;p>You can enable kubernetes authentication by through &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/docs/admin/authentication.md">this documentation&lt;/a>. Then you happily access kube-apiserve by curl:&lt;/p>
&lt;pre tabindex="0">&lt;code># curl -k -N -X GET -H &amp;#34;Authorization: Basic XXXXXXXXXX&amp;#34; http://localhost:8080/api/v1/namespaces/default/pods
{
 &amp;#34;kind&amp;#34;: &amp;#34;PodList&amp;#34;,
 &amp;#34;apiVersion&amp;#34;: &amp;#34;v1&amp;#34;,
 &amp;#34;metadata&amp;#34;: {
 &amp;#34;selfLink&amp;#34;: &amp;#34;/api/v1/namespaces/default/pods&amp;#34;,
 &amp;#34;resourceVersion&amp;#34;: &amp;#34;74034&amp;#34;
 },
 &amp;#34;items&amp;#34;: []
}
&lt;/code>&lt;/pre>&lt;p>Nothing blocks this request! What is wrong? Wait a moment and checkout kubernetes documentation, I find this:&lt;/p>
&lt;blockquote>
&lt;p>The Kubernetes API is served by the Kubernetes apiserver process. Typically,
there is one of these running on a single kubernetes-master node.&lt;/p></description></item><item><title>Use kubectl to connect kubernetes cluster</title><link>https://feisky.xyz/posts/2015-11-04-use-kubectl-to-connect-kubernetes-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://feisky.xyz/posts/2015-11-04-use-kubectl-to-connect-kubernetes-cluster/</guid><description>&lt;p>&lt;code>kubectl&lt;/code> is the main tool to interact with Kubernetes cluster. It connects to &lt;code>http://localhost:8080&lt;/code> with no auth by default. But how can we use &lt;code>kubectl&lt;/code> with auth?&lt;/p>
&lt;p>Pretty simple, just config &lt;code>kubectl&lt;/code> with dedicated cluster:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl config set-credentials default --username=username --password=password
kubectl config set-cluster default --server=https://kubernetes-master:6443 --insecure-skip-tls-verify=true
kubectl config set-context default --cluster=default --user=default
kubectl config use-context default
&lt;/code>&lt;/pre></description></item></channel></rss>